Python3 XML 解析 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 XML 解析
Python3 XML 解析
什么是 XML？
XML 指可扩充套件标记语言（eXtensible Markup Language），标准通用标记语言的子集，是一种用于标记电子档案使其具有结构性的标记语言。 你可以通过本站学习 XML 教程
XML 被设计用来传输和储存资料。
XML 是一套定义语义标记的规则，这些标记将文件分成许多部件并对这些部件加以标识。
它也是元标记语言，即定义了用于定义其他与特定领域有关的、语义的、结构化的标记语言的句法语言。
Python 对 XML 的解析
常见的 XML 程式设计界面有 DOM 和 SAX，这两种界面处理 XML 档案的方式不同，当然使用场合也不同。
Python 有三种方法解析 XML，SAX，DOM，以及 ElementTree:
1.SAX (simple API for XML )
Python 标准库包含 SAX 解析器，SAX 用事件驱动模型，通过在解析 XML 的过程中触发一个个的事件并呼叫使用者定义的回拨函式来处理 XML 档案。
2.DOM(Document Object Model)
将 XML 资料在内存中解析成一个树，通过对树的操作来操作 XML。
本章节使用到的 XML 例项档案 movies.xml 内容如下：
<collection shelf="New Arrivals"> <movie title="Enemy Behind"> <type>War, Thriller</type> <format>DVD</format> <year>2003</year> <rating>PG</rating> <stars>10</stars> <description>Talk about a US-Japan war</description> </movie> <movie title="Transformers"> <type>Anime, Science Fiction</type> <format>DVD</format> <year>1989</year> <rating>R</rating> <stars>8</stars> <description>A schientific fiction</description> </movie> <movie title="Trigun"> <type>Anime, Action</type> <format>DVD</format> <episodes>4</episodes> <rating>PG</rating> <stars>10</stars> <description>Vash the Stampede!</description> </movie> <movie title="Ishtar"> <type>Comedy</type> <format>VHS</format> <rating>PG</rating> <stars>2</stars> <description>Viewable boredom</description> </movie> </collection>
Python 使用 SAX 解析 xml
SAX 是一种基于事件驱动的API。
利用 SAX 解析 XML 文件牵涉到两个部分: 解析器和事件处理器。
解析器负责读取 XML 文件，并向事件处理器传送事件，如元素开始跟元素结束事件。
而事件处理器则负责对事件作出响应，对传递的 XML 资料进行处理。
1、对大型档案进行处理；
2、只需要档案的部分内容，或者只需从档案中得到特定资讯。
3、想建立自己的物件模型的时候。
在 Python 中使用 sax 方式处理 xml 要先引入 xml.sax 中的 parse 函式，还有 xml.sax.handler 中的 ContentHandler。
ContentHandler 类方法介绍
characters(content) 方法
呼叫时机：
从行开始，遇到标签之前，存在字元，content 的值为这些字串。
从一个标签，遇到下一个标签之前， 存在字元，content 的值为这些字串。
从一个标签，遇到行结束符之前，存在字元，content 的值为这些字串。
标签可以是开始标签，也可以是结束标签。
startDocument() 方法
文件启动的时候呼叫。
endDocument() 方法
解析器到达文件结尾时呼叫。
startElement(name, attrs) 方法
遇到XML开始标签时呼叫，name 是标签的名字，attrs 是标签的属性值字典。
endElement(name) 方法
遇到XML结束标签时呼叫。
make_parser 方法
以下方法建立一个新的解析器物件并返回。
xml.sax.make_parser( [parser_list] )
引数说明:
parser_list - 可选引数，解析器列表
parser 方法
以下方法建立一个 SAX 解析器并解析xml文件：
xml.sax.parse( xmlfile, contenthandler[, errorhandler])
引数说明:
xmlfile - xml档名
contenthandler - 必须是一个 ContentHandler 的物件
errorhandler - 如果指定该引数，errorhandler 必须是一个 SAX ErrorHandler 物件
parseString 方法
parseString 方法建立一个 XML 解析器并解析 xml 字串：
xml.sax.parseString(xmlstring, contenthandler[, errorhandler])
引数说明:
xmlstring - xml字串
contenthandler - 必须是一个 ContentHandler 的物件
errorhandler - 如果指定该引数，errorhandler 必须是一个 SAX ErrorHandler物件
Python 解析XML例项
#!/usr/bin/python3 import xml.sax class MovieHandler( xml.sax.ContentHandler ): def __init__(self): self.CurrentDatahttps://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/= "" self.type = "" self.format = "" self.year = "" self.rating = "" self.stars = "" self.description = "" # 元素开始呼叫 def startElement(self, tag, attributes): self.CurrentData = https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/tag if tag =="movie": print ("*****Movie*****") title = attributes["title"] print ("Title:", title) # 元素结束呼叫 def endElement(self, tag): if self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="type": print ("Type:", self.type) elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="format": print ("Format:", self.format) elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="year": print ("Year:", self.year) elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="rating": print ("Rating:", self.rating) elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="stars": print ("Stars:", self.stars) elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="description": print ("Description:", self.description) self.CurrentDatahttps://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/= "" # 读取字元时呼叫 def characters(self, content): if self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="type": self.type = content elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="format": self.format = content elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="year": self.year = content elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="rating": self.rating = content elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="stars": self.stars = content elif self.CurrentData =https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/="description": self.description = content if ( __name__ == "__main__"): # 建立一个 XMLReader parser = xml.sax.make_parser() # 关闭名称空间 parser.setFeature(xml.sax.handler.feature_namespaces, 0) # 重写 ContextHandler Handler = MovieHandler() parser.setContentHandler( Handler ) parser.parse("movies.xml")
以上程式码执行结果如下：
*****Movie***** Title: Enemy Behind Type: War, Thriller Format: DVD Year: 2003 Rating: PG Stars: 10 Description: Talk about a US-Japan war *****Movie***** Title: Transformers Type: Anime, Science Fiction Format: DVD Year: 1989 Rating: R Stars: 8 Description: A schientific fiction *****Movie***** Title: Trigun Type: Anime, Action Format: DVD Rating: PG Stars: 10 Description: Vash the Stampede! *****Movie***** Title: Ishtar Type: Comedy Format: VHS Rating: PG Stars: 2 Description: Viewable boredom
完整的 SAX API 文件请查阅Python SAX APIs
使用xml.dom解析xml
档案物件模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩充套件置标语言的标准程式设计界面。
一个 DOM 的解析器在解析一个 XML 文件时，一次性读取整个文件，把文件中所有元素储存在内存中的一个树结构里，之后你可以利用DOM 提供的不同的函式来读取或修改文件的内容和结构，也可以把修改过的内容写入xml档案。
python中用xml.dom.minidom来解析xml档案，例项如下：
#!/usr/bin/python3 from xml.dom.minidom import parse import xml.dom.minidom # 使用minidom解析器开启 XML 文件 DOMTree = xml.dom.minidom.parse("movies.xml") collection = DOMTree.documentElement if collection.hasAttribute("shelf"): print ("Root element : %s" % collection.getAttribute("shelf")) # 在集合中获取所有电影 movies = collection.getElementsByTagName("movie") # 打印每部电影的详细资讯 for movie in movies: print ("*****Movie*****") if movie.hasAttribute("title"): print ("Title: %s" % movie.getAttribute("title")) type = movie.getElementsByTagName('type')[0] print ("Type: %s" % type.childNodes[0].data) format = movie.getElementsByTagName('format')[0] print ("Format: %s" % format.childNodes[0].data) rating = movie.getElementsByTagName('rating')[0] print ("Rating: %s" % rating.childNodes[0].data) description = movie.getElementsByTagName('description')[0] print ("Description: %s" % description.childNodes[0].data)
以上程式执行结果如下：
Root element : New Arrivals *****Movie***** Title: Enemy Behind Type: War, Thriller Format: DVD Rating: PG Description: Talk about a US-Japan war *****Movie***** Title: Transformers Type: Anime, Science Fiction Format: DVD Rating: R Description: A schientific fiction *****Movie***** Title: Trigun Type: Anime, Action Format: DVD Rating: PG Description: Vash the Stampede! *****Movie***** Title: Ishtar Type: Comedy Format: VHS Rating: PG Description: Viewable boredom
完整的 DOM API 文件请查阅Python DOM APIs。


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
