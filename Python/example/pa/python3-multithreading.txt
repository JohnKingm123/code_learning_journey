Python3 多执行绪 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 多执行绪
Python3 多执行绪
多执行绪类似于同时执行多个不同程式，多执行绪执行有如下优点：
使用执行绪可以把占据长时间的程式中的任务放到后台去处理。
使用者界面可以更加吸引人，比如使用者点选了一个按钮去触发某些事件的处理，可以弹出一个进度条来显示处理的进度。
程式的执行速度可能加快。
在一些等待的任务实现上如使用者输入、档案读写和网络收发资料等，执行绪就比较有用了。在这种情况下我们可以释放一些珍贵的资源如内存占用等等。
每个独立的执行绪有一个程式执行的入口、顺序执行序列和程式的出口。但是执行绪不能够独立执行，必须依存在应用程序中，由应用程序提供多个执行绪执行控制。
每个执行绪都有他自己的一组CPU暂存器，称为执行绪的上下文，该上下文反映了执行绪上次执行该执行绪的CPU暂存器的状态。
指令指标和堆叠指标暂存器是执行绪上下文中两个最重要的暂存器，执行绪总是在程序得到上下文中执行的，这些地址都用于标志拥有执行绪的程序地址空间中的内存。
执行绪可以被抢占（中断）。
在其他执行绪正在执行时，执行绪可以暂时搁置（也称为睡眠） -- 这就是执行绪的退让。
执行绪可以分为:
核心执行绪：由操作系统核心建立和撤销。
使用者执行绪：不需要核心支援而在使用者程式中实现的执行绪。
Python3 执行绪中常用的两个模组为：
_thread
threading(推荐使用)
thread 模组已被废弃。使用者可以使用 threading 模组代替。所以，在 Python3 中不能再使用"thread" 模组。为了相容性，Python3 将 thread 重新命名为 "_thread"。


开始学习Python执行绪
Python中使用执行绪有两种方式：函式或者用类来包装执行绪物件。
函式式：呼叫 _thread 模组中的start_new_thread()函式来产生新执行绪。语法如下:
_thread.start_new_thread ( function, args[, kwargs] )
引数说明:
function - 执行绪函式。
args - 传递给执行绪函式的引数,他必须是个tuple型别。
kwargs - 可选引数。
例项
#!/usr/bin/python3

import _thread
import time

# 为执行绪定义一个函式
def print_time( threadName, delay):
count = 0
while count < 5:
time.sleep(delay)
count += 1
print ("%s: %s" % ( threadName, time.ctime(time.time()) ))

# 建立两个执行绪
try:
_thread.start_new_thread( print_time, ("Thread-1", 2, ) )
_thread.start_new_thread( print_time, ("Thread-2", 4, ) )
except:
print ("Error: 无法启动执行绪")

while 1:
pass

执行以上程式输出结果如下：
Thread-1: Wed Apr 6 11:36:31 2016 Thread-1: Wed Apr 6 11:36:33 2016 Thread-2: Wed Apr 6 11:36:33 2016 Thread-1: Wed Apr 6 11:36:35 2016 Thread-1: Wed Apr 6 11:36:37 2016 Thread-2: Wed Apr 6 11:36:37 2016 Thread-1: Wed Apr 6 11:36:39 2016 Thread-2: Wed Apr 6 11:36:41 2016 Thread-2: Wed Apr 6 11:36:45 2016 Thread-2: Wed Apr 6 11:36:49 2016
执行以上程后可以按下 ctrl-c 退出。
执行绪模组
Python3 通过两个标准库 _thread 和 threading 提供对执行绪的支援。
_thread 提供了低级别的、原始的执行绪以及一个简单的锁，它相比于 threading 模组的功能还是比较有限的。
threading 模组除了包含 _thread 模组中的所有方法外，还提供的其他方法：
threading.currentThread(): 返回当前的执行绪变数。
threading.enumerate(): 返回一个包含正在执行的执行绪的list。正在执行指执行绪启动后、结束前，不包括启动前和终止后的执行绪。
threading.activeCount(): 返回正在执行的执行绪数量，与len(threading.enumerate())有相同的结果。
除了使用方法外，执行绪模组同样提供了Thread类来处理执行绪，Thread类提供了以下方法:
run(): 用以表示执行绪活动的方法。
start():启动执行绪活动。
join([time]): 等待至执行绪中止。这阻塞呼叫执行绪直至执行绪的join() 方法被呼叫中止-正常退出或者丢掷未处理的异常-或者是可选的超时发生。
isAlive(): 返回执行绪是否活动的。
getName(): 返回执行绪名。
setName(): 设定执行绪名。
使用 threading 模组建立执行绪
我们可以通过直接从 threading.Thread 继承建立一个新的子类，并例项化后呼叫 start() 方法启动新执行绪，即它呼叫了执行绪的 run() 方法：
例项
#!/usr/bin/python3

import threading
import time

exitFlag = 0

class myThread (threading.Thread):
def __init__(self, threadID, name, counter):
threading.Thread.__init__(self)
self.threadID = threadID
self.name = name
self.counter = counter
def run(self):
print ("开始执行绪：" + self.name)
print_time(self.name, self.counter, 5)
print ("退出执行绪：" + self.name)

def print_time(threadName, delay, counter):
while counter:
if exitFlag:
threadName.exit()
time.sleep(delay)
print ("%s: %s" % (threadName, time.ctime(time.time())))
counter -= 1

# 建立新执行绪
thread1 = myThread(1, "Thread-1", 1)
thread2 = myThread(2, "Thread-2", 2)

# 开启新执行绪
thread1.start()
thread2.start()
thread1.join()
thread2.join()
print ("退出主执行绪")

以上程式执行结果如下；
开始执行绪：Thread-1 开始执行绪：Thread-2 Thread-1: Wed Apr 6 11:46:46 2016 Thread-1: Wed Apr 6 11:46:47 2016 Thread-2: Wed Apr 6 11:46:47 2016 Thread-1: Wed Apr 6 11:46:48 2016 Thread-1: Wed Apr 6 11:46:49 2016 Thread-2: Wed Apr 6 11:46:49 2016 Thread-1: Wed Apr 6 11:46:50 2016 退出执行绪：Thread-1 Thread-2: Wed Apr 6 11:46:51 2016 Thread-2: Wed Apr 6 11:46:53 2016 Thread-2: Wed Apr 6 11:46:55 2016 退出执行绪：Thread-2 退出主执行绪
执行绪同步
如果多个执行绪共同对某个资料修改，则可能出现不可预料的结果，为了保证资料的正确性，需要对多个执行绪进行同步。
使用 Thread 物件的 Lock 和 Rlock 可以实现简单的执行绪同步，这两个物件都有 acquire 方法和 release 方法，对于那些需要每次只允许一个执行绪操作的资料，可以将其操作放到 acquire 和 release 方法之间。如下：
多执行绪的优势在于可以同时执行多个任务（至少感觉起来是这样）。但是当执行绪需要共享资料时，可能存在资料不同步的问题。
考虑这样一种情况：一个列表里所有元素都是0，执行绪"set"从后向前把所有元素改成1，而执行绪"print"负责从前往后读取列表并打印。
那么，可能执行绪"set"开始改的时候，执行绪"print"便来打印列表了，输出就成了一半0一半1，这就是资料的不同步。为了避免这种情况，引入了锁的概念。
锁有两种状态——锁定和未锁定。每当一个执行绪比如"set"要访问共享资料时，必须先获得锁定；如果已经有别的执行绪比如"print"获得锁定了，那么就让执行绪"set"暂停，也就是同步阻塞；等到执行绪"print"访问完毕，释放锁以后，再让执行绪"set"继续。
经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的尴尬场面。
例项
#!/usr/bin/python3

import threading
import time

class myThread (threading.Thread):
def __init__(self, threadID, name, counter):
threading.Thread.__init__(self)
self.threadID = threadID
self.name = name
self.counter = counter
def run(self):
print ("开启执行绪： " + self.name)
# 获取锁，用于执行绪同步
threadLock.acquire()
print_time(self.name, self.counter, 3)
# 释放锁，开启下一个执行绪
threadLock.release()

def print_time(threadName, delay, counter):
while counter:
time.sleep(delay)
print ("%s: %s" % (threadName, time.ctime(time.time())))
counter -= 1

threadLock = threading.Lock()
threads = []

# 建立新执行绪
thread1 = myThread(1, "Thread-1", 1)
thread2 = myThread(2, "Thread-2", 2)

# 开启新执行绪
thread1.start()
thread2.start()

# 新增执行绪到执行绪列表
threads.append(thread1)
threads.append(thread2)

# 等待所有执行绪完成
for t in threads:
t.join()
print ("退出主执行绪")

执行以上程式，输出结果为：
开启执行绪： Thread-1 开启执行绪： Thread-2 Thread-1: Wed Apr 6 11:52:57 2016 Thread-1: Wed Apr 6 11:52:58 2016 Thread-1: Wed Apr 6 11:52:59 2016 Thread-2: Wed Apr 6 11:53:01 2016 Thread-2: Wed Apr 6 11:53:03 2016 Thread-2: Wed Apr 6 11:53:05 2016 退出主执行绪
执行绪优先级伫列（ Queue）
Python 的 Queue 模组中提供了同步的、执行绪安全的伫列类，包括FIFO（先入先出)伫列Queue，LIFO（后入先出）伫列LifoQueue，和优先级伫列 PriorityQueue。
这些伫列都实现了锁原语，能够在多执行绪中直接使用，可以使用伫列来实现执行绪间的同步。
Queue 模组中的常用方法:
Queue.qsize() 返回伫列的大小
Queue.empty() 如果伫列为空，返回True,反之False
Queue.full() 如果伫列满了，返回True,反之False
Queue.full 与 maxsize 大小对应
Queue.get([block[, timeout]])获取伫列，timeout等待时间
Queue.get_nowait() 相当Queue.get(False)
Queue.put(item) 写入伫列，timeout等待时间
Queue.put_nowait(item) 相当Queue.put(item, False)
Queue.task_done() 在完成一项工作之后，Queue.task_done()函式向任务已经完成的伫列传送一个讯号
Queue.join() 实际上意味着等到伫列为空，再执行别的操作
例项
#!/usr/bin/python3

import queue
import threading
import time

exitFlag = 0

class myThread (threading.Thread):
def __init__(self, threadID, name, q):
threading.Thread.__init__(self)
self.threadID = threadID
self.name = name
self.q = q
def run(self):
print ("开启执行绪：" + self.name)
process_data(self.name, self.q)
print ("退出执行绪：" + self.name)

def process_data(threadName, q):
while not exitFlag:
queueLock.acquire()
if not workQueue.empty():
data = q.get()
queueLock.release()
print ("%s processing %s" % (threadName, data))
else:
queueLock.release()
time.sleep(1)

threadList = ["Thread-1", "Thread-2", "Thread-3"]
nameList = ["One", "Two", "Three", "Four", "Five"]
queueLock = threading.Lock()
workQueue = queue.Queue(10)
threads = []
threadID = 1

# 建立新执行绪
for tName in threadList:
thread = myThread(threadID, tName, workQueue)
thread.start()
threads.append(thread)
threadID += 1

# 填充伫列
queueLock.acquire()
for word in nameList:
workQueue.put(word)
queueLock.release()

# 等待伫列清空
while not workQueue.empty():
pass

# 通知执行绪是时候退出
exitFlag = 1

# 等待所有执行绪完成
for t in threads:
t.join()
print ("退出主执行绪")

以上程式执行结果：
开启执行绪：Thread-1 开启执行绪：Thread-2 开启执行绪：Thread-3 Thread-3 processing One Thread-1 processing Two Thread-2 processing Three Thread-3 processing Four Thread-1 processing Five 退出执行绪：Thread-3 退出执行绪：Thread-2 退出执行绪：Thread-1 退出主执行绪


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
