Python3 基本资料型别 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 基本资料型别
Python3 基本资料型别
Python 中的变数不需要宣告。每个变数在使用前都必须赋值，变数赋值以后该变数才会被建立。
在 Python 中，变数就是变数，它没有型别，我们所说的"型别"是变数所指的内存中物件的型别。
等号（=）用来给变数赋值。
等号（=）运算子左边是一个变数名,等号（=）运算子右边是储存在变数中的值。例如：
例项(Python 3.0+)
#!/usr/bin/python3

counter = 100          # 整型变数
miles   = 1000.0       # 浮点型变数
name    = "itread01"     # 字串

print (counter)
print (miles)
print (name)


执行例项 ?
执行以上程式会输出如下结果：
100 1000.0 itread01
多个变数赋值
Python允许你同时为多个变数赋值。例如：
a = b = c = 1
以上例项，建立一个整型物件，值为 1，从后向前赋值，三个变数被赋予相同的数值。
您也可以为多个物件指定多个变数。例如：
a, b, c = 1, 2, "itread01"
以上例项，两个整型物件 1 和 2 的分配给变数 a 和 b，字串物件 "itread01" 分配给变数 c。
标准资料型别
Python3 中有六个标准的资料型别：
Number（数字）
String（字串）
List（列表）
Tuple（元组）
Set（集合）
Dictionary（字典）
Python3 的六个标准资料型别中：
不可变资料（3 个）：Number（数字）、String（字串）、Tuple（元组）；
可变资料（3 个）：List（列表）、Dictionary（字典）、Set（集合）。
Number（数字）
Python3 支援 int、float、bool、complex（复数）。
在Python 3里，只有一种整数型别 int，表示为长整型，没有 python2 中的 Long。
像大多数语言一样，数值型别的赋值和计算都是很直观的。
内建的 type() 函式可以用来查询变数所指的物件型别。
>>> a, b, c, d = 20, 5.5, True, 4+3j >>> print(type(a), type(b), type(c), type(d)) <class 'int'> <class 'float'> <class 'bool'> <class 'complex'>
此外还可以用 isinstance 来判断：
例项
>>> a = 111
>>> isinstance(a, int)
True
>>>

isinstance 和 type 的区别在于：
type()不会认为子类是一种父类型别。
isinstance()会认为子类是一种父类型别。
>>> class A: ... pass ... >>> class B(A): ... pass ... >>> isinstance(A(), A) True >>> type(A()) == A True >>> isinstance(B(), A) True >>> type(B()) == A False
注意：在 Python2 中是没有布林型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。
当你指定一个值时，Number 物件就会被建立：
var1 = 1 var2 = 10
您也可以使用del语句删除一些物件引用。
del语句的语法是：
del var1[,var2[,var3[....,varN]]]
您可以通过使用del语句删除单个或多个物件。例如：
del var del var_a, var_b
数值运算
例项
>>> 5 + 4  # 加法
9
>>> 4.3 - 2 # 减法
2.3
>>> 3 * 7  # 乘法
21
>>> 2 / 4  # 除法，得到一个浮点数
0.5
>>> 2 // 4 # 除法，得到一个整数
0
>>> 17 % 3 # 取余
2
>>> 2 ** 5 # 乘方
32

注意：
1、Python可以同时为多个变数赋值，如a, b = 1, 2。
2、一个变数可以通过赋值指向不同型别的物件。
3、数值的除法包含两个运算子：/ 返回一个浮点数，// 返回一个整数。
4、在混合计算时，Python会把整型转换成为浮点数。
数值型别例项
int
float
complex
10
0.0
3.14j
100
15.20
45.j
-786
-21.9
9.322e-36j
080
32.3e+18
.876j
-0490
-90.
-.6545+0J
-0x260
-32.54e100
3e+26J
0x69
70.2E-12
4.53e-7j
Python还支援复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型
String（字串）
Python中的字串用单引号 ' 或双引号 " 括起来，同时使用反斜杠 \ 转义特殊字元。
字串的撷取的语法格式如下：
变数[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置。
加号 + 是字串的连线符， 星号 * 表示复制当前字串，与之结合的数字为复制的次数。例项如下：
例项
#!/usr/bin/python3

str = 'itread01'

print (str)          # 输出字串
print (str[0:-1])    # 输出第一个到倒数第二个的所有字元
print (str[0])       # 输出字串第一个字元
print (str[2:5])     # 输出从第三个开始到第五个的字元
print (str[2:])      # 输出从第三个开始的后的所有字元
print (str * 2)      # 输出字串两次，也可以写成 print (2 * str)
print (str + "TEST") # 连线字串

执行以上程式会输出如下结果：
itread01 Runoo R noo noob itread01itread01 itread01TEST
Python 使用反斜杠 \ 转义特殊字元，如果你不想让反斜杠发生转义，可以在字串前面新增一个 r，表示原始字串：
例项
>>> print('Ru\noob')
Ru
oob
>>> print(r'Ru\noob')
Ru\noob
>>>

另外，反斜杠(\)可以作为续行符，表示下一行是上一行的延续。也可以使用 """...""" 或者 '''...''' 跨越多行。
注意，Python 没有单独的字元型别，一个字元就是长度为1的字串。
例项
>>> word = 'Python'
>>> print(word[0], word[5])
P n
>>> print(word[-1], word[-6])
n P

与 C 字串不同的是，Python 字串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。
注意：
1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。
2、字串可以用+运算子连线在一起，用*运算子重复。
3、Python中的字串有两种索引方式，从左往右以0开始，从右往左以-1开始。
4、Python中的字串不能改变。
List（列表）
List（列表） 是 Python 中使用最频繁的资料型别。
列表可以完成大多数集合类的资料结构实现。列表中元素的型别可以不相同，它支援数字，字串甚至可以包含列表（所谓巢状）。
列表是写在方括号 [] 之间、用逗号分隔开的元素列表。
和字串一样，列表同样可以被索引和撷取，列表被撷取后返回一个包含所需元素的新列表。
列表撷取的语法格式如下：
变数[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置。
加号 + 是列表连线运算子，星号 * 是重复操作。如下例项：
例项
#!/usr/bin/python3

list = [ 'abcd', 786 , 2.23, 'itread01', 70.2 ]
tinylist = [123, 'itread01']

print (list)            # 输出完整列表
print (list[0])         # 输出列表第一个元素
print (list[1:3])       # 从第二个开始输出到第三个元素
print (list[2:])        # 输出从第三个元素开始的所有元素
print (tinylist * 2)    # 输出两次列表
print (list + tinylist) # 连线列表

以上例项输出结果：
['abcd', 786, 2.23, 'itread01', 70.2] abcd [786, 2.23] [2.23, 'itread01', 70.2] [123, 'itread01', 123, 'itread01'] ['abcd', 786, 2.23, 'itread01', 70.2, 123, 'itread01']
与Python字串不一样的是，列表中的元素是可以改变的：
例项
>>> a = [1, 2, 3, 4, 5, 6]
>>> a[0] = 9
>>> a[2:5] = [13, 14, 15]
>>> a
[9, 2, 13, 14, 15, 6]
>>> a[2:5] = []   # 将对应的元素值设定为 []
>>> a
[9, 2, 6]

List 内建了有很多方法，例如 append()、pop() 等等，这在后面会讲到。
注意：
1、List写在方括号之间，元素用逗号隔开。
2、和字串一样，list可以被索引和切片。
3、List可以使用+操作符进行拼接。
4、List中的元素是可以改变的。
Python 列表撷取可以接收第三个引数，引数作用是撷取的步长，以下例项在索引 1 到索引 4 的位置并设定为步长为 2（间隔一个位置）来撷取字串：
如果第三个引数为负数表示逆向读取，以下例项用于翻转字串：
例项
def reverseWords(input):

# 通过空格将字串分隔符，把各个单词分隔为列表
inputWords = input.split(" ")

# 翻转字串
# 假设列表 list = [1,2,3,4],
# list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)
# inputWords[-1::-1] 有三个引数
# 第一个引数 -1 表示最后一个元素
# 第二个引数为空，表示移动到列表末尾
# 第三个引数为步长，-1 表示逆向
inputWords=inputWords[-1::-1]

# 重新组合字串
output = ' '.join(inputWords)

return output

if __name__ == "__main__":
input = 'I like itread01'
rw = reverseWords(input)
print(rw)

输出结果为：
itread01 like I
Tuple（元组）
元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。
元组中的元素型别也可以不相同：
例项
#!/usr/bin/python3

tuple = ( 'abcd', 786 , 2.23, 'itread01', 70.2  )
tinytuple = (123, 'itread01')

print (tuple)             # 输出完整元组
print (tuple[0])          # 输出元组的第一个元素
print (tuple[1:3])        # 输出从第二个元素开始到第三个元素
print (tuple[2:])         # 输出从第三个元素开始的所有元素
print (tinytuple * 2)     # 输出两次元组
print (tuple + tinytuple) # 连线元组

以上例项输出结果：
('abcd', 786, 2.23, 'itread01', 70.2) abcd (786, 2.23) (2.23, 'itread01', 70.2) (123, 'itread01', 123, 'itread01') ('abcd', 786, 2.23, 'itread01', 70.2, 123, 'itread01')
元组与字串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行撷取（看上面，这里不再赘述）。
其实，可以把字串看作一种特殊的元组。
例项
>>> tup = (1, 2, 3, 4, 5, 6)
>>> print(tup[0])
1
>>> print(tup[1:5])
(2, 3, 4, 5)
>>> tup[0] = 11  # 修改元组元素的操作是非法的
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>>

虽然tuple的元素不可改变，但它可以包含可变的物件，比如list列表。
构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：
tup1 = () # 空元组 tup2 = (20,) # 一个元素，需要在元素后新增逗号
string、list 和 tuple 都属于 sequence（序列）。
注意：
1、与字串一样，元组的元素不能修改。
2、元组也可以被索引和切片，方法一样。
3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。
4、元组也可以使用+操作符进行拼接。
Set（集合）
集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或物件称作元素或是成员。
基本功能是进行成员关系测试和删除重复元素。
可以使用大括号 { } 或者 set() 函式建立集合，注意：建立一个空集合必须用 set() 而不是 { }，因为 { } 是用来建立一个空字典。
建立格式：
parame = {value01,value02,...} 或者 set(value)
例项
#!/usr/bin/python3

sites = {'Google', 'Taobao', 'itread01', 'Facebook', 'Zhihu', 'Baidu'}

print(sites)   # 输出集合，重复的元素被自动去掉

# 成员测试
if 'itread01' in sites :
print('itread01 在集合中')
else :
print('itread01 不在集合中')


# set可以进行集合运算
a = set('abracadabra')
b = set('alacazam')

print(a)

print(a - b)     # a 和 b 的差集

print(a | b)     # a 和 b 的并集

print(a & b)     # a 和 b 的交集

print(a ^ b)     # a 和 b 中不同时存在的元素

以上例项输出结果：
{'Zhihu', 'Baidu', 'Taobao', 'itread01', 'Google', 'Facebook'} itread01 在集合中 {'b', 'c', 'a', 'r', 'd'} {'r', 'b', 'd'} {'b', 'c', 'a', 'z', 'm', 'r', 'l', 'd'} {'c', 'a'} {'z', 'b', 'm', 'r', 'l', 'd'}
Dictionary（字典）
字典（dictionary）是Python中另一个非常有用的内建资料型别。
列表是有序的物件集合，字典是无序的物件集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
字典是一种对映型别，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。
键(key)必须使用不可变型别。
在同一个字典中，键(key)必须是唯一的。
例项
#!/usr/bin/python3

dict = {}
dict['one'] = "1 - 入门教学"
dict[2]     = "2 - 菜鸟工具"

tinydict = {'name': 'itread01','code':1, 'site': 'www.itread01.com'}


print (dict['one'])       # 输出键为 'one' 的值
print (dict[2])           # 输出键为 2 的值
print (tinydict)          # 输出完整的字典
print (tinydict.keys())   # 输出所有键
print (tinydict.values()) # 输出所有值

以上例项输出结果：
1 - 入门教学 2 - 菜鸟工具 {'name': 'itread01', 'code': 1, 'site': 'www.itread01.com'} dict_keys(['name', 'code', 'site']) dict_values(['itread01', 1, 'www.itread01.com'])
建构函式 dict() 可以直接从键值对序列中构建字典如下：
例项
>>> dict([('itread01', 1), ('Google', 2), ('Taobao', 3)])
{'itread01': 1, 'Google': 2, 'Taobao': 3}
>>> {x: x**2 for x in (2, 4, 6)}
{2: 4, 4: 16, 6: 36}
>>> dict(itread01=1, Google=2, Taobao=3)
{'itread01': 1, 'Google': 2, 'Taobao': 3}
>>>


另外，字典型别也有一些内建的函式，例如clear()、keys()、values()等。
注意：
1、字典是一种对映型别，它的元素是键值对。
2、字典的关键字必须为不可变型别，且不能重复。
3、建立空字典使用 { }。
Python资料型别转换
有时候，我们需要对资料内建的型别进行转换，资料型别的转换，你只需要将资料型别作为函式名即可。
以下几个内建的函式可以执行资料型别之间的转换。这些函式返回一个新的物件，表示转换的值。
函式
描述
int(x [,base])
将x转换为一个整数
float(x)
将x转换到一个浮点数
complex(real [,imag])
建立一个复数
str(x)
将物件 x 转换为字串
repr(x)
将物件 x 转换为表示式字串
eval(str)
用来计算在字串中的有效Python表示式,并返回一个物件
tuple(s)
将序列 s 转换为一个元组
list(s)
将序列 s 转换为一个列表
set(s)
转换为可变集合
dict(d)
建立一个字典。d 必须是一个 (key, value)元组序列。
frozenset(s)
转换为不可变集合
chr(x)
将一个整数转换为一个字元
ord(x)
将一个字元转换为它的整数值
hex(x)
将一个整数转换为一个十六进位制字串
oct(x)
将一个整数转换为一个八进位制字串


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
