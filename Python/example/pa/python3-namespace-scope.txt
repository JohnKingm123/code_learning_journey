Python3 名称空间和作用域 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 名称空间和作用域
Python3 名称空间和作用域
名称空间
先看看官方文件的一段话：
A namespace is a mapping from names to objects.Most namespaces are currently implemented as Python dictionaries。
名称空间(Namespace)是从名称到物件的对映，大部分的名称空间都是通过 Python 字典来实现的。
名称空间提供了在专案中避免名字冲突的一种方法。各个名称空间是独立的，没有任何关系的，所以一个名称空间中不能有重名，但不同的名称空间是可以重名而没有任何影响。
我们举一个计算机系统中的例子，一个资料夹(目录)中可以包含多个资料夹，每个资料夹中不能有相同的档名，但不同资料夹中的档案可以重名。
一般有三种名称空间：
内建名称（built-in names）， Python 语言内建的名称，比如函式名 abs、char 和异常名称 BaseException、Exception 等等。
全域性名称（global names），模组中定义的名称，记录了模组的变数，包括函式、类、其它汇入的模组、模组级的变数和常量。
区域性名称（local names），函式中定义的名称，记录了函式的变数，包括函式的引数和区域性定义的变数。（类中定义的也是）
名称空间查询顺序:
假设我们要使用变数 itread01，则 Python 的查询顺序为：区域性的名称空间去 -> 全域性名称空间 -> 内建名称空间。
如果找不到变数 itread01，它将放弃查询并引发一个 NameError 异常:
NameError: name 'itread01' is not defined。
名称空间的生命周期：
名称空间的生命周期取决于物件的作用域，如果物件执行完成，则该名称空间的生命周期就结束。
因此，我们无法从外部名称空间访问内部名称空间的物件。
例项
# var1 是全域性名称
var1 = 5
def some_func():

# var2 是区域性名称
var2 = 6
def some_inner_func():

# var3 是内嵌的区域性名称
var3 = 7

如下图所示，相同的物件名称可以存在于多个名称空间中。
作用域
A scope is a textual region of a Python program where a namespace is directly accessible. "Directly accessible" here means that an unqualified reference to a name attempts to find the name in the namespace.
作用域就是一个 Python 程式可以直接访问名称空间的正文区域。
在一个 python 程式中，直接访问一个变数，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误。
Python 中，程式的变数并不是在哪个位置都可以访问的，访问许可权决定于这个变数是在哪里赋值的。
变数的作用域决定了在哪一部分程式可以访问哪个特定的变数名称。Python 的作用域一共有4种，分别是：
有四种作用域：
L（Local）：最内层，包含区域性变数，比如一个函式/方法内部。
E（Enclosing）：包含了非区域性(non-local)也非全域性(non-global)的变数。比如两个巢状函式，一个函式（或类） A 里面又包含了一个函式 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。
G（Global）：当前指令码的最外层，比如当前模组的全域性变数。
B（Built-in）： 包含了内建的变数/关键字等，最后被搜寻。
规则顺序： L –> E –> G –gt; B。
在区域性找不到，便会去区域性外的区域性找（例如闭包），再找不到就会去全域性找，再者去内建中找。
g_count = 0 # 全域性作用域 def outer(): o_count = 1 # 闭包函式外的函式中 def inner(): i_count = 2 # 区域性作用域
内建作用域是通过一个名为 builtin 的标准模组来实现的，但是这个变数名自身并没有放入内建作用域内，所以必须汇入这个档案才能够使用它。在Python3.0中，可以使用以下的程式码来检视到底预定义了哪些变数:
>>> import builtins >>> dir(builtins)
Python 中只有模组（module），类（class）以及函式（def、lambda）才会引入新的作用域，其它的程式码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变数，外部也可以访问，如下程式码：
>>> if True: ... msg = 'I am from itread01' ... >>> msg 'I am from itread01' >>>
例项中 msg 变数定义在 if 语句块中，但外部还是可以访问的。
如果将 msg 定义在函式中，则它就是区域性变数，外部不能访问：
>>> def test(): ... msg_inner = 'I am from itread01' ... >>> msg_inner Traceback (most recent call last): File "<stdin>", line 1, in <module> NameError: name 'msg_inner' is not defined >>>
从报错的资讯上看，说明了 msg_inner 未定义，无法使用，因为它是区域性变数，只有在函式内可以使用。
全域性变数和区域性变数
定义在函式内部的变数拥有一个区域性作用域，定义在函式外的拥有全域性作用域。
区域性变数只能在其被宣告的函式内部访问，而全域性变数可以在整个程式范围内访问。呼叫函式时，所有在函式内宣告的变数名称都将被加入到作用域中。如下例项：
例项(Python 3.0+)
#!/usr/bin/python3 total = 0 # 这是一个全域性变数 # 可写函式说明 def sum( arg1, arg2 ): #返回2个引数的和." total = arg1 + arg2 # total在这里是区域性变数. print ("函式内是区域性变数 : ", total) return total #呼叫sum函式 sum( 10, 20 ) print ("函式外是全域性变数 : ", total)
以上例项输出结果：
函式内是区域性变数 : 30 函式外是全域性变数 : 0
global 和 nonlocal关键字
当内部作用域想修改外部作用域的变数时，就要用到 global 和 nonlocal 关键字了。
以下例项修改全域性变数 num：
例项(Python 3.0+)
#!/usr/bin/python3 num = 1 def fun1(): global num # 需要使用 global 关键字宣告 print(num) num = 123 print(num) fun1() print(num)
以上例项输出结果：
1 123 123
如果要修改巢状作用域（enclosing 作用域，外层非全域性作用域）中的变数则需要 nonlocal 关键字了，如下例项：
例项(Python 3.0+)
#!/usr/bin/python3 def outer(): num = 10 def inner(): nonlocal num # nonlocal关键字宣告 num = 100 print(num) inner() print(num) outer()
以上例项输出结果：
100 100
另外有一种特殊情况，假设下面这段程式码被执行：
例项(Python 3.0+)
#!/usr/bin/python3 a = 10 def test(): a = a + 1 print(a) test()
以上程式执行，报错资讯如下：
Traceback (most recent call last): File "test.py", line 7, in <module> test() File "test.py", line 5, in test a = a + 1 UnboundLocalError: local variable 'a' referenced before assignment
错误资讯为区域性作用域引用错误，因为 test 函式中的 a 使用的是区域性，未定义，无法修改。
修改 a 为全域性变数：
例项
#!/usr/bin/python3 a = 10 def test(): global a a = a + 1 print(a) test()
执行输出结果为：
11
也可以通过函式引数传递：
例项(Python 3.0+)
#!/usr/bin/python3 a = 10 def test(a): a = a + 1 print(a) test(a)
执行输出结果为：
11


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
