Python3 迭代器与生成器 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 迭代器与生成器
Python3 迭代器与生成器
迭代器
迭代是Python最强大的功能之一，是访问集合元素的一种方式。
迭代器是一个可以记住遍历的位置的物件。
迭代器物件从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。
迭代器有两个基本的方法：iter() 和 next()。
字串，列表或元组物件都可用于建立迭代器：
例项(Python 3.0+)
>>> list=[1,2,3,4]
>>> it = iter(list)    # 建立迭代器物件
>>> print (next(it))   # 输出迭代器的下一个元素
1
>>> print (next(it))
2
>>>

迭代器物件可以使用常规for语句进行遍历：
例项(Python 3.0+)
#!/usr/bin/python3 list=[1,2,3,4] it = iter(list) # 建立迭代器物件 for x in it: print (x, end=" ")
执行以上程式，输出结果如下：
1 2 3 4
也可以使用 next() 函式：
例项(Python 3.0+)
#!/usr/bin/python3 import sys # 引入 sys 模组 list=[1,2,3,4] it = iter(list) # 建立迭代器物件 while True: try: print (next(it)) except StopIteration: sys.exit()
执行以上程式，输出结果如下：
1 2 3 4
建立一个迭代器
把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__() 。
如果你已经了解的面向物件程式设计，就知道类都有一个建构函式，Python 的建构函式为 __init__(), 它会在物件初始化的时候执行。
更多内容查阅：Python3 面向物件
__iter__() 方法返回一个特殊的迭代器物件， 这个迭代器物件实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成。
__next__() 方法（Python 2 里是 next()）会返回下一个迭代器物件。
建立一个返回数字的迭代器，初始值为 1，逐步递增 1：
例项(Python 3.0+)
class MyNumbers: def __iter__(self): self.a = 1 return self def __next__(self): x = self.a self.a += 1 return x myclass = MyNumbers() myiter = iter(myclass) print(next(myiter)) print(next(myiter)) print(next(myiter)) print(next(myiter)) print(next(myiter))
执行输出结果为：
1 2 3 4 5
StopIteration
StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 __next__() 方法中我们可以设定在完成指定循环次数后触发 StopIteration 异常来结束迭代。
在 20 次迭代后停止执行：
例项(Python 3.0+)
class MyNumbers: def __iter__(self): self.a = 1 return self def __next__(self): if self.a <= 20: x = self.a self.a += 1 return x else: raise StopIteration myclass = MyNumbers() myiter = iter(myclass) for x in myiter: print(x)
执行输出结果为：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
生成器
在 Python 中，使用了 yield 的函式被称为生成器（generator）。
跟普通函式不同的是，生成器是一个返回迭代器的函式，只能用于迭代操作，更简单点理解生成器就是一个迭代器。
在呼叫生成器执行的过程中，每次遇到 yield 时函式会暂停并储存当前所有的执行资讯，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续执行。
呼叫一个生成器函式，返回的是一个迭代器物件。
以下例项使用 yield 实现斐波那契数列：
例项(Python 3.0+)
#!/usr/bin/python3 import sys def fibonacci(n): # 生成器函式 - 斐波那契 a, b, counter = 0, 1, 0 while True: if (counter > n): return yield a a, b = b, a + b counter += 1 f = fibonacci(10) # f 是一个迭代器，由生成器返回生成 while True: try: print (next(f), end=" ") except StopIteration: sys.exit()
执行以上程式，输出结果如下：
0 1 1 2 3 5 8 13 21 34 55


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
