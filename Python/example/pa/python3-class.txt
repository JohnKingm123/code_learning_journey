Python3 面向物件 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 面向物件
Python3 面向物件
Python从设计之初就已经是一门面向物件的语言，正因为如此，在Python中建立一个类和物件是很容易的。本章节我们将详细介绍Python的面向物件程式设计。
如果你以前没有接触过面向物件的程式语言，那你可能需要先了解一些面向物件语言的一些基本特征，在头脑里头形成一个基本的面向物件的概念，这样有助于你更容易的学习Python的面向物件程式设计。
接下来我们先来简单的了解下面向物件的一些基本特征。
面向物件技术简介
类(Class): 用来描述具有相同的属性和方法的物件的集合。它定义了该集合中每个物件所共有的属性和方法。物件是类的例项。
方法：类中定义的函式。
类变数：类变数在整个例项化的物件中是公用的。类变数定义在类中且在函式体之外。类变数通常不作为例项变数使用。
资料成员：类变数或者例项变数用于处理类及其例项物件的相关的资料。
方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。
区域性变数：定义在方法中的变数，只作用于当前例项的类。
例项变数：在类的宣告中，属性是用变数来表示的，这种变数就称为例项变数，例项变数就是一个用 self 修饰的变数。
继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的物件作为一个基类物件对待。例如，有这样一个设计：一个Dog型别的物件派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。
例项化：建立一个类的例项，类的具体物件。
物件：通过类定义的资料结构例项。物件包括两个资料成员（类变数和例项变数）和方法。
和其它程式语言相比，Python 在尽可能不增加新的语法和语义的情况下加入了类机制。
Python中的类提供了面向物件程式设计的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以呼叫基类中的同名方法。
物件可以包含任意数量和型别的资料。
类定义
语法格式如下：
class ClassName: <statement-1> . . . <statement-N>
类例项化后，可以使用其属性，实际上，建立一个类之后，可以通过类名访问其属性。
类物件
类物件支援两种操作：属性引用和例项化。
属性引用使用和 Python 中所有的属性引用一样的标准语法：obj.name。
类物件建立后，类名称空间中所有的命名都是有效属性名。所以如果类定义是这样:
例项(Python 3.0+)
#!/usr/bin/python3 class MyClass: """一个简单的类例项""" i = 12345 def f(self): return 'hello world' # 例项化类 x = MyClass() # 访问类的属性和方法 print("MyClass 类的属性 i 为：", x.i) print("MyClass 类的方法 f 输出为：", x.f())
以上建立了一个新的类例项并将该物件赋给区域性变数 x，x 为空的物件。
执行以上程式输出结果为：
MyClass 类的属性 i 为： 12345 MyClass 类的方法 f 输出为： hello world
类有一个名为 __init__() 的特殊方法（构造方法），该方法在类例项化时会自动呼叫，像下面这样：
def __init__(self): self.data = []
类定义了 __init__() 方法，类的例项化操作会自动呼叫 __init__() 方法。如下例项化类 MyClass，对应的 __init__() 方法就会被呼叫:
x = MyClass()
当然， __init__() 方法可以有引数，引数通过 __init__() 传递到类的例项化操作上。例如:
例项(Python 3.0+)
#!/usr/bin/python3 class Complex: def __init__(self, realpart, imagpart): self.r = realpart self.i = imagpart x = Complex(3.0, -4.5) print(x.r, x.i) # 输出结果：3.0 -4.5
self代表类的例项，而非类
类的方法与普通的函式只有一个特别的区别——它们必须有一个额外的第一个引数名称, 按照惯例它的名称是 self。
class Test: def prt(self): print(self) print(self.__class__) t = Test() t.prt()
以上例项执行结果为：
<__main__.Test instance at 0x100771878> __main__.Test
从执行结果可以很明显的看出，self 代表的是类的例项，代表当前物件的地址，而 self.class 则指向类。
self 不是 python 关键字，我们把他换成 itread01 也是可以正常执行的:
class Test: def prt(itread01): print(itread01) print(itread01.__class__) t = Test() t.prt()
以上例项执行结果为：
<__main__.Test instance at 0x100771878> __main__.Test
类的方法
在类的内部，使用 def 关键字来定义一个方法，与一般函式定义不同，类方法必须包含引数 self, 且为第一个引数，self 代表的是类的例项。
例项(Python 3.0+)
#!/usr/bin/python3 #类定义 class people: #定义基本属性 name = '' age = 0 #定义私有属性,私有属性在类外部无法直接进行访问 __weight = 0 #定义构造方法 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w def speak(self): print("%s 说: 我 %d 岁。" %(self.name,self.age)) # 例项化类 p = people('itread01',10,30) p.speak()
执行以上程式输出结果为：
itread01 说: 我 10 岁。
继承
Python 同样支援类的继承，如果一种语言不支援继承，类就没有什么意义。派生类的定义如下所示:
class DerivedClassName(BaseClassName): <statement-1> . . . <statement-N>
子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。
BaseClassName（例项中的基类名）必须与派生类定义在一个作用域内。除了类，还可以用表示式，基类定义在另一个模组中时这一点非常有用:
class DerivedClassName(modname.BaseClassName):
例项(Python 3.0+)
#!/usr/bin/python3 #类定义 class people: #定义基本属性 name = '' age = 0 #定义私有属性,私有属性在类外部无法直接进行访问 __weight = 0 #定义构造方法 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w def speak(self): print("%s 说: 我 %d 岁。" %(self.name,self.age)) #单继承示例 class student(people): grade = '' def __init__(self,n,a,w,g): #呼叫父类的构函 people.__init__(self,n,a,w) self.grade = g #覆写父类的方法 def speak(self): print("%s 说: 我 %d 岁了，我在读 %d 年级"%(self.name,self.age,self.grade)) s = student('ken',10,60,3) s.speak()
执行以上程式输出结果为：
ken 说: 我 10 岁了，我在读 3 年级
多继承
Python同样有限的支援多继承形式。多继承的类定义形如下例:
class DerivedClassName(Base1, Base2, Base3): <statement-1> . . . <statement-N>
需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜寻 即方法在子类中未找到时，从左到右查询父类中是否包含方法。
例项(Python 3.0+)
#!/usr/bin/python3 #类定义 class people: #定义基本属性 name = '' age = 0 #定义私有属性,私有属性在类外部无法直接进行访问 __weight = 0 #定义构造方法 def __init__(self,n,a,w): self.name = n self.age = a self.__weight = w def speak(self): print("%s 说: 我 %d 岁。" %(self.name,self.age)) #单继承示例 class student(people): grade = '' def __init__(self,n,a,w,g): #呼叫父类的构函 people.__init__(self,n,a,w) self.grade = g #覆写父类的方法 def speak(self): print("%s 说: 我 %d 岁了，我在读 %d 年级"%(self.name,self.age,self.grade)) #另一个类，多重继承之前的准备 class speaker(): topic = '' name = '' def __init__(self,n,t): self.name = n self.topic = t def speak(self): print("我叫 %s，我是一个演说家，我演讲的主题是 %s"%(self.name,self.topic)) #多重继承 class sample(speaker,student): a ='' def __init__(self,n,a,w,g,t): student.__init__(self,n,a,w,g) speaker.__init__(self,n,t) test = sample("Tim",25,80,4,"Python") test.speak() #方法名同，预设呼叫的是在括号中排前地父类的方法
执行以上程式输出结果为：
我叫 Tim，我是一个演说家，我演讲的主题是 Python
方法重写
如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法，例项如下：
例项(Python 3.0+)
#!/usr/bin/python3 class Parent: # 定义父类 def myMethod(self): print ('呼叫父类方法') class Child(Parent): # 定义子类 def myMethod(self): print ('呼叫子类方法') c = Child() # 子类例项 c.myMethod() # 子类呼叫重写方法 super(Child,c).myMethod() #用子类物件呼叫父类已被覆盖的方法
super() 函式是用于呼叫父类(超类)的一个方法。
执行以上程式输出结果为：
呼叫子类方法 呼叫父类方法
更多文件：
Python 子类继承父类建构函式说明
类属性与方法
类的私有属性
__private_attrs：两个下划线开头，宣告该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。
类的方法
在类的内部，使用 def 关键字来定义一个方法，与一般函式定义不同，类方法必须包含引数 self，且为第一个引数，self 代表的是类的例项。
self 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定使用 self。
类的私有方法
__private_method：两个下划线开头，宣告该方法为私有方法，只能在类的内部呼叫 ，不能在类的外部呼叫。self.__private_methods。
例项
类的私有属性例项如下：
例项(Python 3.0+)
#!/usr/bin/python3 class JustCounter: __secretCount = 0 # 私有变数 publicCount = 0 # 公开变数 def count(self): self.__secretCount += 1 self.publicCount += 1 print (self.__secretCount) counter = JustCounter() counter.count() counter.count() print (counter.publicCount) print (counter.__secretCount) # 报错，例项不能访问私有变数
执行以上程式输出结果为：
1 2 2 Traceback (most recent call last): File "test.py", line 16, in <module> print (counter.__secretCount) # 报错，例项不能访问私有变数 AttributeError: 'JustCounter' object has no attribute '__secretCount'
类的私有方法例项如下：
例项(Python 3.0+)
#!/usr/bin/python3 class Site: def __init__(self, name, url): self.name = name # public self.__url = url # private def who(self): print('name : ', self.name) print('url : ', self.__url) def __foo(self): # 私有方法 print('这是私有方法') def foo(self): # 公共方法 print('这是公共方法') self.__foo() x = Site('入门教学', 'www.itread01.com') x.who() # 正常输出 x.foo() # 正常输出 x.__foo() # 报错
以上例项执行结果：
类的专有方法：
__init__ : 建构函式，在生成物件时呼叫
__del__ : 解构函式，释放物件时使用
__repr__ : 打印，转换
__setitem__ : 按照索引赋值
__getitem__: 按照索引获取值
__len__: 获得长度
__cmp__: 比较运算
__call__: 函式呼叫
__add__: 加运算
__sub__: 减运算
__mul__: 乘运算
__truediv__: 除运算
__mod__: 求余运算
__pow__: 乘方
运算子过载
Python同样支援运算子过载，我们可以对类的专有方法进行过载，例项如下：
例项(Python 3.0+)
#!/usr/bin/python3 class Vector: def __init__(self, a, b): self.a = a self.b = b def __str__(self): return 'Vector (%d, %d)' % (self.a, self.b) def __add__(self,other): return Vector(self.a + other.a, self.b + other.b) v1 = Vector(2,10) v2 = Vector(5,-2) print (v1 + v2)
以上程式码执行结果如下所示:
Vector(7,8)


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
