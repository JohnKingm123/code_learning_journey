Python3 列表 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 列表
Python3 列表
序列是 Python 中最基本的资料结构。
序列中的每个值都有对应的位置值，称之为索引，第一个索引是 0，第二个索引是 1，依此类推。
Python 有 6 个序列的内建型别，但最常见的是列表和元组。
列表都可以进行的操作包括索引，切片，加，乘，检查成员。
此外，Python 已经内建确定序列的长度以及确定最大和最小的元素的方法。
列表是最常用的 Python 资料型别，它可以作为一个方括号内的逗号分隔值出现。
列表的资料项不需要具有相同的型别
建立一个列表，只要把逗号分隔的不同的资料项使用方括号括起来即可。如下所示：
list1 = ['Google', 'itread01', 1997, 2000] list2 = [1, 2, 3, 4, 5 ] list3 = ["a", "b", "c", "d"] list4 = ['red', 'green', 'blue', 'yellow', 'white', 'black']
访问列表中的值
与字串的索引一样，列表索引从 0 开始，第二个索引是 1，依此类推。
通过索引列表可以进行撷取、组合等操作。
例项
#!/usr/bin/python3

list = ['red', 'green', 'blue', 'yellow', 'white', 'black']
print( list[0] )
print( list[1] )
print( list[2] )

以上例项输出结果：
red green blue
索引也可以从尾部开始，最后一个元素的索引为 -1，往前一位为 -2，以此类推。
例项
#!/usr/bin/python3

list = ['red', 'green', 'blue', 'yellow', 'white', 'black']
print( list[-1] )
print( list[-2] )
print( list[-3] )

以上例项输出结果：
black white yellow
使用下标索引来访问列表中的值，同样你也可以使用方括号 [] 的形式撷取字元，如下所示：
例项
#!/usr/bin/python3

nums = [10, 20, 30, 40, 50, 60, 70, 80, 90]
print(nums[0:4])

以上例项输出结果：
[10, 20, 30, 40]
使用负数索引值撷取：
例项
#!/usr/bin/python3 list = ['Google', 'itread01', "Zhihu", "Taobao", "Wiki"] # 读取第二位 print ("list[1]: ", list[1]) # 从第二位开始（包含）撷取到倒数第二位（不包含） print ("list[1:-2]: ", list[1:-2])
以上例项输出结果：
list[1]: itread01 list[1:-2]: ['itread01', 'Zhihu']
更新列表
你可以对列表的资料项进行修改或更新，你也可以使用 append() 方法来新增列表项，如下所示：
例项(Python 3.0+)
#!/usr/bin/python3 list = ['Google', 'itread01', 1997, 2000] print ("第三个元素为 : ", list[2]) list[2] = 2001 print ("更新后的第三个元素为 : ", list[2]) list1 = ['Google', 'itread01', 'Taobao'] list1.append('Baidu') print ("更新后的列表 : ", list1)
注意：我们会在接下来的章节讨论 append() 方法的使用。
以上例项输出结果：
第三个元素为 : 1997 更新后的第三个元素为 : 2001 更新后的列表 : ['Google', 'itread01', 'Taobao', 'Baidu']
删除列表元素
可以使用 del 语句来删除列表的的元素，如下例项：
例项(Python 3.0+)
#!/usr/bin/python3 list = ['Google', 'itread01', 1997, 2000] print ("原始列表 : ", list) del list[2] print ("删除第三个元素 : ", list)
以上例项输出结果：
原始列表 : ['Google', 'itread01', 1997, 2000] 删除第三个元素 : ['Google', 'itread01', 2000]
注意：我们会在接下来的章节讨论 remove() 方法的使用
Python列表指令码操作符
列表对 + 和 * 的操作符与字串相似。+ 号用于组合列表，* 号用于重复列表。
如下所示：
Python 表示式
结果
描述
len([1, 2, 3])
3
长度
[1, 2, 3] + [4, 5, 6]
[1, 2, 3, 4, 5, 6]
组合
['Hi!'] * 4
['Hi!', 'Hi!', 'Hi!', 'Hi!']
重复
3 in [1, 2, 3]
True
元素是否存在于列表中
for x in [1, 2, 3]: print(x, end=" ")
1 2 3
迭代
Python列表撷取与拼接
Python的列表撷取与字串操作型别，如下所示：
L=['Google', 'itread01', 'Taobao']
操作：
Python 表示式
结果
描述
L[2]
'Taobao'
读取第三个元素
L[-2]
'itread01'
从右侧开始读取倒数第二个元素: count from the right
L[1:]
['itread01', 'Taobao']
输出从第二个元素开始后的所有元素
>>>L=['Google', 'itread01', 'Taobao'] >>> L[2] 'Taobao' >>> L[-2] 'itread01' >>> L[1:] ['itread01', 'Taobao'] >>>
列表还支援拼接操作：
>>>squares = [1, 4, 9, 16, 25] >>> squares += [36, 49, 64, 81, 100] >>> squares [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] >>>
巢状列表
使用巢状列表即在列表里建立其它列表，例如：
>>>a = ['a', 'b', 'c'] >>> n = [1, 2, 3] >>> x = [a, n] >>> x [['a', 'b', 'c'], [1, 2, 3]] >>> x[0] ['a', 'b', 'c'] >>> x[0][1] 'b'
Python列表函式&方法
Python包含以下函式:
序号
函式
1
len(list)
列表元素个数
2
max(list)
返回列表元素最大值
3
min(list)
返回列表元素最小值
4
list(seq)
将元组转换为列表
Python包含以下方法:
序号
方法
1
list.append(obj)
在列表末尾新增新的物件
2
list.count(obj)
统计某个元素在列表中出现的次数
3
list.extend(seq)
在列表末尾一次性追加另一个序列中的多个值（用新列表扩充套件原来的列表）
4
list.index(obj)
从列表中找出某个值第一个匹配项的索引位置
5
list.insert(index, obj)
将物件插入列表
6
list.pop([index=-1])
移除列表中的一个元素（预设最后一个元素），并且返回该元素的值
7
list.remove(obj)
移除列表中某个值的第一个匹配项
8
list.reverse()
反向列表中元素
9
list.sort( key=None, reverse=False)
对原列表进行排序
10
list.clear()
清空列表
11
list.copy()
复制列表


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
