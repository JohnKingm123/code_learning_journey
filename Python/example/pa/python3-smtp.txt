Python3 SMTP传送邮件 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 SMTP传送邮件
Python3 SMTP传送邮件
SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。
python的smtplib提供了一种很方便的途径传送电子邮件。它对smtp协议进行了简单的封装。
Python建立 SMTP 物件语法如下：
import smtplib smtpObj = smtplib.SMTP( [host [, port [, local_hostname]]] )
引数说明：
host: SMTP 服务器主机。 你可以指定主机的ip地址或者域名如:itread01.com，这个是可选引数。
port: 如果你提供了 host 引数, 你需要指定 SMTP 服务使用的埠号，一般情况下SMTP埠号为25。
local_hostname: 如果SMTP在你的本机上，你只需要指定服务器地址为 localhost 即可。
Python SMTP物件使用sendmail方法传送邮件，语法如下：
SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options]
引数说明：
from_addr: 邮件传送者地址。
to_addrs: 字串列表，邮件传送地址。
msg: 传送讯息
这里要注意一下第三个引数，msg是字串，表示邮件。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，传送邮件的时候，要注意msg的格式。这个格式就是smtp协议中定义的格式。
例项
以下是一个使用Python传送邮件简单的例项：
例项
#!/usr/bin/python3 import smtplib from email.mime.text import MIMEText from email.header import Header sender = '[email protected]' receivers = ['[email protected]'] # 接收邮件，可设定为你的QQ邮箱或者其他邮箱 # 三个引数：第一个为文字内容，第二个 plain 设定文字格式，第三个 utf-8 设定编码 message = MIMEText('Python 邮件传送测试...', 'plain', 'utf-8') message['From'] = Header("入门教学", 'utf-8') # 传送者 message['To'] = Header("测试", 'utf-8') # 接收者 subject = 'Python SMTP 邮件测试' message['Subject'] = Header(subject, 'utf-8') try: smtpObj = smtplib.SMTP('localhost') smtpObj.sendmail(sender, receivers, message.as_string()) print ("邮件传送成功") except smtplib.SMTPException: print ("Error: 无法传送邮件")
我们使用三个引号来设定邮件资讯，标准邮件需要三个头部资讯： From, To, 和 Subject ，每个资讯直接使用空行分割。
我们通过例项化 smtplib 模组的 SMTP 物件 smtpObj 来连线到 SMTP 访问，并使用 sendmail 方法来发送资讯。
执行以上程式，如果你本机安装sendmail，就会输出：
$ python3 test.py 邮件传送成功
检视我们的收件箱(一般在垃圾箱)，就可以检视到邮件资讯：
如果我们本机没有 sendmail 访问，也可以使用其他服务商的 SMTP 访问（QQ、网易、Google等）。
例项
#!/usr/bin/python3 import smtplib from email.mime.text import MIMEText from email.header import Header # 第三方 SMTP 服务 mail_host="smtp.XXX.com" #设定服务器 mail_user="XXXX" #使用者名称 mail_pass="XXXXXX" #口令 sender = '[email protected]' receivers = ['[email protected]'] # 接收邮件，可设定为你的QQ邮箱或者其他邮箱 message = MIMEText('Python 邮件传送测试...', 'plain', 'utf-8') message['From'] = Header("入门教学", 'utf-8') message['To'] = Header("测试", 'utf-8') subject = 'Python SMTP 邮件测试' message['Subject'] = Header(subject, 'utf-8') try: smtpObj = smtplib.SMTP() smtpObj.connect(mail_host, 25) # 25 为 SMTP 埠号 smtpObj.login(mail_user,mail_pass) smtpObj.sendmail(sender, receivers, message.as_string()) print ("邮件传送成功") except smtplib.SMTPException: print ("Error: 无法传送邮件")
使用Python传送HTML格式的邮件
Python传送HTML格式的邮件与传送纯文字讯息的邮件不同之处就是将MIMEText中_subtype设定为html。具体程式码如下：
例项
#!/usr/bin/python3 import smtplib from email.mime.text import MIMEText from email.header import Header sender = '[email protected]' receivers = ['[email protected]'] # 接收邮件，可设定为你的QQ邮箱或者其他邮箱 mail_msg = """ <p>Python 邮件传送测试...</p> <p><a href=https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/"http://www.itread01.com">这是一个连结 """ message = MIMEText(mail_msg, 'html', 'utf-8') message['From'] = Header("入门教学", 'utf-8') message['To'] = Header("测试", 'utf-8') subject = 'Python SMTP 邮件测试' message['Subject'] = Header(subject, 'utf-8') try: smtpObj = smtplib.SMTP('localhost') smtpObj.sendmail(sender, receivers, message.as_string()) print ("邮件传送成功") except smtplib.SMTPException: print ("Error: 无法传送邮件")
执行以上程式，如果你本机安装sendmail，就会输出：
$ python3 test.py 邮件传送成功
检视我们的收件箱(一般在垃圾箱)，就可以检视到邮件资讯：
Python 传送带附件的邮件
传送带附件的邮件，首先要建立MIMEMultipart()例项，然后构造附件，如果有多个附件，可依次构造，最后利用smtplib.smtp传送。
例项
#!/usr/bin/python3 import smtplib from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart from email.header import Header sender = '[email protected]' receivers = ['[email protected]'] # 接收邮件，可设定为你的QQ邮箱或者其他邮箱 #建立一个带附件的例项 message = MIMEMultipart() message['From'] = Header("入门教学", 'utf-8') message['To'] = Header("测试", 'utf-8') subject = 'Python SMTP 邮件测试' message['Subject'] = Header(subject, 'utf-8') #邮件正文内容 message.attach(MIMEText('这是入门教学Python 邮件传送测试……', 'plain', 'utf-8')) # 构造附件1，传送当前目录下的 test.txt 档案 att1 = MIMEText(open('test.txt', 'rb').read(), 'base64', 'utf-8') att1["Content-Type"] = 'application/octet-stream' # 这里的filename可以任意写，写什么名字，邮件中显示什么名字 att1["Content-Disposition"] = 'attachment; filename="test.txt"' message.attach(att1) # 构造附件2，传送当前目录下的 itread01.txt 档案 att2 = MIMEText(open('itread01.txt', 'rb').read(), 'base64', 'utf-8') att2["Content-Type"] = 'application/octet-stream' att2["Content-Disposition"] = 'attachment; filename="itread01.txt"' message.attach(att2) try: smtpObj = smtplib.SMTP('localhost') smtpObj.sendmail(sender, receivers, message.as_string()) print ("邮件传送成功") except smtplib.SMTPException: print ("Error: 无法传送邮件")
$ python3 test.py 邮件传送成功
检视我们的收件箱(一般在垃圾箱)，就可以检视到邮件资讯：
在 HTML 文字中新增图片
邮件的 HTML 文字中一般邮件服务商新增外链是无效的，正确新增图片的例项如下所示：
例项
#!/usr/bin/python3 import smtplib from email.mime.image import MIMEImage from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText from email.header import Header sender = '[email protected]' receivers = ['[email protected]'] # 接收邮件，可设定为你的QQ邮箱或者其他邮箱 msgRoot = MIMEMultipart('related') msgRoot['From'] = Header("入门教学", 'utf-8') msgRoot['To'] = Header("测试", 'utf-8') subject = 'Python SMTP 邮件测试' msgRoot['Subject'] = Header(subject, 'utf-8') msgAlternative = MIMEMultipart('alternative') msgRoot.attach(msgAlternative) mail_msg = """ <p>Python 邮件传送测试...</p> <p><a href=https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/"http://www.itread01.com">入门教学连结
图片演示：
""" msgAlternative.attach(MIMEText(mail_msg, 'html', 'utf-8')) # 指定图片为当前目录 fp = open('test.png', 'rb') msgImage = MIMEImage(fp.read()) fp.close() # 定义图片 ID，在 HTML 文字中引用 msgImage.add_header('Content-ID', '<image1>') msgRoot.attach(msgImage) try: smtpObj = smtplib.SMTP('localhost') smtpObj.sendmail(sender, receivers, msgRoot.as_string()) print ("邮件传送成功") except smtplib.SMTPException: print ("Error: 无法传送邮件")
$ python3 test.py 邮件传送成功
检视我们的收件箱(如果在垃圾箱可能需要移动到收件箱才可正常显示)，就可以检视到邮件资讯：
使用第三方 SMTP 服务传送
这里使用了 QQ 邮箱(你也可以使用 163，Gmail等)的 SMTP 服务，需要做以下配置：
QQ 邮箱通过生成授权码来设定密码：
QQ 邮箱 SMTP 服务器地址：smtp.qq.com，ssl 埠：465。
以下例项你需要修改：发件人邮箱（你的QQ邮箱），密码，收件人邮箱（可发给自己）。
QQ SMTP
#!/usr/bin/python3 import smtplib from email.mime.text import MIMEText from email.utils import formataddr my_sender='[email protected]' # 发件人邮箱账号 my_pass = 'xxxxxxxxxx' # 发件人邮箱密码 my_user='[email protected]' # 收件人邮箱账号，我这边传送给自己 def mail(): ret=True try: msg=MIMEText('填写邮件内容','plain','utf-8') msg['From']=formataddr(["Fromitread01",my_sender]) # 括号里的对应发件人邮箱昵称、发件人邮箱账号 msg['To']=formataddr(["FK",my_user]) # 括号里的对应收件人邮箱昵称、收件人邮箱账号 msg['Subject']="入门教学传送邮件测试" # 邮件的主题，也可以说是标题 server=smtplib.SMTP_SSL("smtp.qq.com", 465) # 发件人邮箱中的SMTP服务器，埠是25 server.login(my_sender, my_pass) # 括号中对应的是发件人邮箱账号、邮箱密码 server.sendmail(my_sender,[my_user,],msg.as_string()) # 括号中对应的是发件人邮箱账号、收件人邮箱账号、传送邮件 server.quit() # 关闭连线 except Exception: # 如果 try 中的语句没有执行，则会执行下面的 ret=False ret=False return ret ret=mail() if ret: print("邮件传送成功") else: print("邮件传送失败")
$ python test.py 邮件传送成功
传送成功后，登陆收件人邮箱即可检视：
更多内容请参阅：https://docs.python.org/3/library/email-examples.html。


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
