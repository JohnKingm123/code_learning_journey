Python3 网络程式设计 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 网络程式设计
Python3 网络程式设计
Python 提供了两个级别访问的网络服务。：
低级别的网络服务支援基本的 Socket，它提供了标准的 BSD Sockets API，可以访问底层操作系统Socket界面的全部方法。
高级别的网络服务模组 SocketServer， 它提供了服务器中心类，可以简化网络服务器的开发。
什么是 Socket?
Socket又称"套接字"，应用程序通常通过"套接字"向网络发出请求或者应答网络请求，使主机间或者一台计算机上的程序间可以通讯。
socket()函式
Python 中，我们用 socket() 函式来建立套接字，语法格式如下：
socket.socket([family[, type[, proto]]])
引数
family: 套接字家族可以是 AF_UNIX 或者 AF_INET
type: 套接字型别可以根据是面向连线的还是非连线分为SOCK_STREAM或SOCK_DGRAM
protocol: 一般不填预设为0.
Socket 物件(内建)方法
函式
描述
服务器端套接字
s.bind()
系结地址（host,port）到套接字， 在AF_INET下,以元组（host,port）的形式表示地址。
s.listen()
开始TCP监听。backlog指定在拒绝连线之前，操作系统可以挂起的最大连线数量。该值至少为1，大部分应用程序设为5就可以了。
s.accept()
被动接受TCP客户端连线,(阻塞式)等待连线的到来
客户端套接字
s.connect()
主动初始化TCP服务器连线，。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。
s.connect_ex()
connect()函式的扩充套件版本,出错时返回出错码,而不是丢掷异常
公共用途的套接字函式
s.recv()
接收TCP资料，资料以字串形式返回，bufsize指定要接收的最大资料量。flag提供有关讯息的其他资讯，通常可以忽略。
s.send()
传送TCP资料，将string中的资料传送到连线的套接字。返回值是要传送的字节数量，该数量可能小于string的字节大小。
s.sendall()
完整发送TCP资料，完整发送TCP资料。将string中的资料传送到连线的套接字，但在返回之前会尝试传送所有资料。成功返回None，失败则丢掷异常。
s.recvfrom()
接收UDP资料，与recv()类似，但返回值是（data,address）。其中data是包含接收资料的字串，address是传送资料的套接字地址。
s.sendto()
传送UDP资料，将资料传送到套接字，address是形式为（ipaddr，port）的元组，指定远端地址。返回值是传送的字节数。
s.close()
关闭套接字
s.getpeername()
返回连线套接字的远端地址。返回值通常是元组（ipaddr,port）。
s.getsockname()
返回套接字自己的地址。通常是一个元组(ipaddr,port)
s.setsockopt(level,optname,value)
设定给定套接字选项的值。
s.getsockopt(level,optname[.buflen])
返回套接字选项的值。
s.settimeout(timeout)
设定套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚建立套接字时设定，因为它们可能用于连线的操作（如connect()）
s.gettimeout()
返回当前超时期的值，单位是秒，如果没有设定超时期，则返回None。
s.fileno()
返回套接字的档案描述符。
s.setblocking(flag)
如果 flag 为 False，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（预设值）。非阻塞模式下，如果呼叫 recv() 没有发现任何资料，或 send() 呼叫无法立即传送资料，那么将引起 socket.error 异常。
s.makefile()
建立一个与该套接字相关连的档案
简单例项
服务端
我们使用 socket 模组的 socket 函式来建立一个 socket 物件。socket 物件可以通过呼叫其他函式来设定一个 socket 服务。
现在我们可以通过呼叫 bind(hostname, port) 函式来指定服务的 port(埠)。
接着，我们呼叫 socket 物件的 accept 方法。该方法等待客户端的连线，并返回 connection 物件，表示已连线到客户端。
完整程式码如下：
#!/usr/bin/python3 # 档名：server.py # 汇入 socket、sys 模组 import socket import sys # 建立 socket 物件 serversocket = socket.socket( socket.AF_INET, socket.SOCK_STREAM) # 获取本地主机名 host = socket.gethostname() port = 9999 # 系结埠号 serversocket.bind((host, port)) # 设定最大连线数，超过后排队 serversocket.listen(5) while True: # 建立客户端连线 clientsocket,addr = serversocket.accept() print("连线地址: %s" % str(addr)) msg='欢迎访问入门教学！'+ "\r\n" clientsocket.send(msg.encode('utf-8')) clientsocket.close()
客户端
接下来我们写一个简单的客户端例项连线到以上建立的服务。埠号为 9999。
socket.connect(hosname, port ) 方法开启一个 TCP 连线到主机为 hostname 埠为 port 的服务商。连线后我们就可以从服务端获取资料，记住，操作完成后需要关闭连线。
完整程式码如下：
#!/usr/bin/python3 # 档名：client.py # 汇入 socket、sys 模组 import socket import sys # 建立 socket 物件 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # 获取本地主机名 host = socket.gethostname() # 设定埠号 port = 9999 # 连线服务，指定主机和埠 s.connect((host, port)) # 接收小于 1024 字节的资料 msg = s.recv(1024) s.close() print (msg.decode('utf-8'))
现在我们开启两个终端，第一个终端执行 server.py 档案：
$ python3 server.py
第二个终端执行 client.py 档案：
$ python3 client.py 欢迎访问入门教学！
这时我们再开启第一个终端，就会看到有以下资讯输出：
连线地址： ('192.168.0.118', 33397)
Python Internet 模组
以下列出了 Python 网络程式设计的一些重要模组：
协议
功能用处
埠号
Python 模组
HTTP
网页访问
80
httplib, urllib, xmlrpclib
NNTP
阅读和张贴新闻文章，俗称为"帖子"
119
nntplib
FTP
档案传输
20
ftplib, urllib
SMTP
传送邮件
25
smtplib
POP3
接收邮件
110
poplib
IMAP4
获取邮件
143
imaplib
Telnet
命令列
23
telnetlib
Gopher
资讯查询
70
gopherlib, urllib
更多内容可以参阅官网的 Python Socket Library and Modules。


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
