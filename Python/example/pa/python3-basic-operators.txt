Python3 运算子 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 运算子
Python3 运算子
什么是运算子？
本章节主要说明 Python 的运算子。
举个简单的例子:
4 + 5 = 9
例子中，4 和 5 被称为算子，+ 称为运算子。
Python 语言支援以下型别的运算子:
算术运算子
比较（关系）运算子
赋值运算子
逻辑运算子
位运算子
成员运算子
身份运算子
运算子优先级
接下来让我们一个个来学习Python的运算子。
Python算术运算子
以下假设变数a为10，变数b为21：
运算子
描述
例项
+
加 - 两个物件相加
a + b 输出结果 31
-
减 - 得到负数或是一个数减去另一个数
a - b 输出结果 -11
*
乘 - 两个数相乘或是返回一个被重复若干次的字串
a * b 输出结果 210
/
除 - x 除以 y
b / a 输出结果 2.1
%
取模 - 返回除法的余数
b % a 输出结果 1
**
幂 - 返回x的y次幂
a**b 为10的21次方
//
取整除 - 向下取接近商的整数
>>> 9//2 4 >>> -9//2 -5
以下例项演示了Python所有算术运算子的操作：
例项(Python 3.0+)
#!/usr/bin/python3 a = 21 b = 10 c = 0 c = a + b print ("1 - c 的值为：", c) c = a - b print ("2 - c 的值为：", c) c = a * b print ("3 - c 的值为：", c) c = a / b print ("4 - c 的值为：", c) c = a % b print ("5 - c 的值为：", c) # 修改变数 a 、b 、c a = 2 b = 3 c = a**b print ("6 - c 的值为：", c) a = 10 b = 5 c = a//b print ("7 - c 的值为：", c)
以上例项输出结果：
1 - c 的值为： 31 2 - c 的值为： 11 3 - c 的值为： 210 4 - c 的值为： 2.1 5 - c 的值为： 1 6 - c 的值为： 8 7 - c 的值为： 2
Python比较运算子
以下假设变数a为10，变数b为20：
运算子
描述
例项
==
等于 - 比较物件是否相等
(a == b) 返回 False。
!=
不等于 - 比较两个物件是否不相等
(a != b) 返回 True。
>
大于 - 返回x是否大于y
(a > b) 返回 False。
<
小于 - 返回x是否小于y。所有比较运算子返回1表示真，返回0表示假。这分别与特殊的变数True和False等价。注意，这些变数名的大写。
(a < b) 返回 True。
>=
大于等于 - 返回x是否大于等于y。
(a >= b) 返回 False。
<=
小于等于 - 返回x是否小于等于y。
(a <= b) 返回 True。
以下例项演示了Python所有比较运算子的操作：
例项(Python 3.0+)
#!/usr/bin/python3 a = 21 b = 10 c = 0 if ( a == b ): print ("1 - a 等于 b") else: print ("1 - a 不等于 b") if ( a != b ): print ("2 - a 不等于 b") else: print ("2 - a 等于 b") if ( a < b ): print ("3 - a 小于 b") else: print ("3 - a 大于等于 b") if ( a > b ): print ("4 - a 大于 b") else: print ("4 - a 小于等于 b") # 修改变数 a 和 b 的值 a = 5 b = 20 if ( a <= b ): print ("5 - a 小于等于 b") else: print ("5 - a 大于 b") if ( b >= a ): print ("6 - b 大于等于 a") else: print ("6 - b 小于 a")
以上例项输出结果：
1 - a 不等于 b 2 - a 不等于 b 3 - a 大于等于 b 4 - a 大于 b 5 - a 小于等于 b 6 - b 大于等于 a
Python赋值运算子
以下假设变数a为10，变数b为20：
运算子
描述
例项
=
简单的赋值运算子
c = a + b 将 a + b 的运算结果赋值为 c
+=
加法赋值运算子
c += a 等效于 c = c + a
-=
减法赋值运算子
c -= a 等效于 c = c - a
*=
乘法赋值运算子
c *= a 等效于 c = c * a
/=
除法赋值运算子
c /= a 等效于 c = c / a
%=
取模赋值运算子
c %= a 等效于 c = c % a
**=
幂赋值运算子
c **= a 等效于 c = c ** a
//=
取整除赋值运算子
c //= a 等效于 c = c // a
:=
海象运算子，可在表示式内部为变数赋值。Python3.8 版本新增运算子。
在这个示例中，赋值表示式可以避免呼叫 len() 两次:
if (n := len(a)) > 10: print(f"List is too long ({n} elements, expected <= 10)")
以下例项演示了Python所有赋值运算子的操作：
例项(Python 3.0+)
#!/usr/bin/python3 a = 21 b = 10 c = 0 c = a + b print ("1 - c 的值为：", c) c += a print ("2 - c 的值为：", c) c *= a print ("3 - c 的值为：", c) c /= a print ("4 - c 的值为：", c) c = 2 c %= a print ("5 - c 的值为：", c) c **= a print ("6 - c 的值为：", c) c //= a print ("7 - c 的值为：", c)
以上例项输出结果：
1 - c 的值为： 31 2 - c 的值为： 52 3 - c 的值为： 1092 4 - c 的值为： 52.0 5 - c 的值为： 2 6 - c 的值为： 2097152 7 - c 的值为： 99864
Python位运算子
按位运算子是把数字看作二进位制来进行计算的。Python中的按位运算法则如下：
下表中变数 a 为 60，b 为 13二进位制格式如下：
a = 0011 1100 b = 0000 1101 ----------------- a&b = 0000 1100 a|b = 0011 1101 a^b = 0011 0001 ~a = 1100 0011
运算子
描述
例项
&
按位与运算子：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
(a & b) 输出结果 12 ，二进位制解释： 0000 1100
|
按位或运算子：只要对应的二个二进制有一个为1时，结果位就为1。
(a | b) 输出结果 61 ，二进位制解释： 0011 1101
^
按位异或运算子：当两对应的二进制相异时，结果为1
(a ^ b) 输出结果 49 ，二进位制解释： 0011 0001
~
按位取反运算子：对资料的每个二进位制位取反,即把1变为0,把0变为1。~x 类似于 -x-1
(~a ) 输出结果 -61 ，二进位制解释： 1100 0011， 在一个有符号二进位制数的补码形式。
<<
左移动运算子：运算数的各二进制全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。
a << 2 输出结果 240 ，二进位制解释： 1111 0000
>>
右移动运算子：把">>"左边的运算数的各二进制全部右移若干位，">>"右边的数指定移动的位数
a >> 2 输出结果 15 ，二进位制解释： 0000 1111
以下例项演示了Python所有位运算子的操作：
例项(Python 3.0+)
#!/usr/bin/python3 a = 60 # 60 = 0011 1100 b = 13 # 13 = 0000 1101 c = 0 c = a & b # 12 = 0000 1100 print ("1 - c 的值为：", c) c = a | b # 61 = 0011 1101 print ("2 - c 的值为：", c) c = a ^ b # 49 = 0011 0001 print ("3 - c 的值为：", c) c = ~a # -61 = 1100 0011 print ("4 - c 的值为：", c) c = a << 2 # 240 = 1111 0000 print ("5 - c 的值为：", c) c = a >> 2 # 15 = 0000 1111 print ("6 - c 的值为：", c)
以上例项输出结果：
1 - c 的值为： 12 2 - c 的值为： 61 3 - c 的值为： 49 4 - c 的值为： -61 5 - c 的值为： 240 6 - c 的值为： 15
Python逻辑运算子
Python语言支援逻辑运算子，以下假设变数 a 为 10, b为 20:
运算子
逻辑表示式
描述
例项
and
x and y
布林"与" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。
(a and b) 返回 20。
or
x or y
布林"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。
(a or b) 返回 10。
not
not x
布林"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。
not(a and b) 返回 False
以上例项输出结果：
例项(Python 3.0+)
#!/usr/bin/python3 a = 10 b = 20 if ( a and b ): print ("1 - 变数 a 和 b 都为 true") else: print ("1 - 变数 a 和 b 有一个不为 true") if ( a or b ): print ("2 - 变数 a 和 b 都为 true，或其中一个变数为 true") else: print ("2 - 变数 a 和 b 都不为 true") # 修改变数 a 的值 a = 0 if ( a and b ): print ("3 - 变数 a 和 b 都为 true") else: print ("3 - 变数 a 和 b 有一个不为 true") if ( a or b ): print ("4 - 变数 a 和 b 都为 true，或其中一个变数为 true") else: print ("4 - 变数 a 和 b 都不为 true") if not( a and b ): print ("5 - 变数 a 和 b 都为 false，或其中一个变数为 false") else: print ("5 - 变数 a 和 b 都为 true")
以上例项输出结果：
1 - 变数 a 和 b 都为 true 2 - 变数 a 和 b 都为 true，或其中一个变数为 true 3 - 变数 a 和 b 有一个不为 true 4 - 变数 a 和 b 都为 true，或其中一个变数为 true 5 - 变数 a 和 b 都为 false，或其中一个变数为 false
Python成员运算子
除了以上的一些运算子之外，Python还支援成员运算子，测试例项中包含了一系列的成员，包括字串，列表或元组。
运算子
描述
例项
in
如果在指定的序列中找到值返回 True，否则返回 False。
x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
not in
如果在指定的序列中没有找到值返回 True，否则返回 False。
x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。
以下例项演示了Python所有成员运算子的操作：
例项(Python 3.0+)
#!/usr/bin/python3 a = 10 b = 20 list = [1, 2, 3, 4, 5 ] if ( a in list ): print ("1 - 变数 a 在给定的列表中 list 中") else: print ("1 - 变数 a 不在给定的列表中 list 中") if ( b not in list ): print ("2 - 变数 b 不在给定的列表中 list 中") else: print ("2 - 变数 b 在给定的列表中 list 中") # 修改变数 a 的值 a = 2 if ( a in list ): print ("3 - 变数 a 在给定的列表中 list 中") else: print ("3 - 变数 a 不在给定的列表中 list 中")
以上例项输出结果：
1 - 变数 a 不在给定的列表中 list 中 2 - 变数 b 不在给定的列表中 list 中 3 - 变数 a 在给定的列表中 list 中
Python身份运算子
身份运算子用于比较两个物件的储存单元
运算子
描述
例项
is
is 是判断两个识别符号是不是引用自一个物件
x is y, 类似 id(x) == id(y) , 如果引用的是同一个物件则返回 True，否则返回 False
is not
is not 是判断两个识别符号是不是引用自不同物件
x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个物件则返回结果 True，否则返回 False。
注： id() 函式用于获取物件内存地址。
以下例项演示了Python所有身份运算子的操作：
例项(Python 3.0+)
#!/usr/bin/python3 a = 20 b = 20 if ( a is b ): print ("1 - a 和 b 有相同的标识") else: print ("1 - a 和 b 没有相同的标识") if ( id(a) == id(b) ): print ("2 - a 和 b 有相同的标识") else: print ("2 - a 和 b 没有相同的标识") # 修改变数 b 的值 b = 30 if ( a is b ): print ("3 - a 和 b 有相同的标识") else: print ("3 - a 和 b 没有相同的标识") if ( a is not b ): print ("4 - a 和 b 没有相同的标识") else: print ("4 - a 和 b 有相同的标识")
以上例项输出结果：
1 - a 和 b 有相同的标识 2 - a 和 b 有相同的标识 3 - a 和 b 没有相同的标识 4 - a 和 b 没有相同的标识
is 与 == 区别：
is 用于判断两个变数引用物件是否为同一个， == 用于判断引用变数的值是否相等。
>>>a = [1, 2, 3] >>> b = a >>> b is a True >>> b == a True >>> b = a[:] >>> b is a False >>> b == a True
Python运算子优先级
以下表格列出了从最高到最低优先级的所有运算子：
运算子
描述
**
指数 (最高优先级)
~ + -
按位翻转, 一元加号和减号 (最后两个的方法名为 [email protected] 和 [email protected])
* / % //
乘，除，求余数和取整除
+ -
加法减法
>> <<
右移，左移运算子
&
位 'AND'
^ |
位运算子
<= < > >=
比较运算子
== !=
等于运算子
= %= /= //= -= += *= **=
赋值运算子
is is not
身份运算子
in not in
成员运算子
not and or
逻辑运算子
以下例项演示了Python所有运算子优先级的操作：
例项(Python 3.0+)
#!/usr/bin/python3 a = 20 b = 10 c = 15 d = 5 e = 0 e = (a + b) * c / d #( 30 * 15 ) / 5 print ("(a + b) * c / d 运算结果为：", e) e = ((a + b) * c) / d # (30 * 15 ) / 5 print ("((a + b) * c) / d 运算结果为：", e) e = (a + b) * (c / d) # (30) * (15/5) print ("(a + b) * (c / d) 运算结果为：", e) e = a + (b * c) / d # 20 + (150/5) print ("a + (b * c) / d 运算结果为：", e)
以上例项输出结果：
(a + b) * c / d 运算结果为： 90.0 ((a + b) * c) / d 运算结果为： 90.0 (a + b) * (c / d) 运算结果为： 90.0 a + (b * c) / d 运算结果为： 50.0
and 拥有更高优先级:
例项
x = True y = False z = False if x or y and z: print("yes") else: print("no")
以上例项输出结果：
yes
注意：Pyhton3 已不支援 <> 运算子，可以使用 != 代替，如果你一定要使用这种比较运算子，可以使用以下的方式：
>>> from __future__ import barry_as_FLUFL >>> 1 <> 2 True


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
