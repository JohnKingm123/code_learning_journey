Python3 CGI程式设计 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 CGI程式设计
Python CGI程式设计
什么是CGI
CGI 目前由NCSA维护，NCSA定义CGI如下：
CGI(Common Gateway Interface),通用闸道器界面,它是一段程式,执行在服务器上如：HTTP服务器，提供同客户端HTML页面的界面。
网页浏览
为了更好的了解CGI是如何工作的，我们可以从在网页上点选一个连结或URL的流程：
1、使用你的浏览器访问URL并连线到HTTP web 服务器。
2、Web服务器接收到请求资讯后会解析URL，并查询访问的档案在服务器上是否存在，如果存在返回档案的内容，否则返回错误资讯。
3、浏览器从服务器上接收资讯，并显示接收的档案或者错误资讯。
CGI程式可以是Python指令码，PERL指令码，SHELL指令码，C或者C++程式等。
CGI架构图
Web服务器支援及配置
在你进行CGI程式设计前，确保您的Web服务器支援CGI及已经配置了CGI的处理程式。
Apache 支援CGI 配置：
设定好CGI目录：
ScriptAlias /cgi-bin/ /var/www/cgi-bin/
所有的HTTP服务器执行CGI程式都储存在一个预先配置的目录。这个目录被称为CGI目录，并按照惯例，它被命名为/var/www/cgi-bin目录。
CGI档案的副档名为.cgi，python也可以使用.py副档名。
预设情况下，Linux服务器配置执行的cgi-bin目录中为/var/www。
如果你想指定其他执行CGI指令码的目录，可以修改httpd.conf配置档案，如下所示：
<Directory "/var/www/cgi-bin"> AllowOverride None Options +ExecCGI Order allow,deny Allow from all </Directory>
在 AddHandler 中新增 .py 字尾，这样我们就可以访问 .py 结尾的 python 指令码档案：
AddHandler cgi-script .cgi .pl .py
第一个CGI程式
我们使用Python建立第一个CGI程式，档名为hello.py，档案位于/var/www/cgi-bin目录中，内容如下：
#!/usr/bin/python3 print ("Content-type:text/html") print () # 空行，告诉服务器结束头部 print ('<html>') print ('<head>') print ('<meta charset="utf-8">') print ('<title>Hello Word - 我的第一个 CGI 程式！</title>') print ('</head>') print ('<body>') print ('<h2>Hello Word! 我是来自入门教学的第一CGI程式</h2>') print ('</body>') print ('</html>')
档案储存后修改 hello.py，修改档案许可权为 755：
chmod 755 hello.py
以上程式在浏览器访问显示结果如下：
这个的hello.py指令码是一个简单的Python指令码，指令码第一行的输出内容"Content-type:text/html"传送到浏览器并告知浏览器显示的内容型别为"text/html"。
用 print 输出一个空行用于告诉服务器结束头部资讯。
HTTP头部
hello.py档案内容中的" Content-type:text/html"即为HTTP头部的一部分，它会发送给浏览器告诉浏览器档案的内容型别。
HTTP头部的格式如下：
HTTP 字段名: 字段内容
例如：
Content-type: text/html
以下表格介绍了CGI程式中HTTP头部经常使用的资讯：
头
描述
Content-type:
请求的与实体对应的MIME资讯。例如: Content-type:text/html
Expires: Date
响应过期的日期和时间
Location: URL
用来重定向接收方到非请求URL的位置来完成请求或标识新的资源
Last-modified: Date
请求资源的最后修改时间
Content-length: N
请求的内容长度
Set-Cookie: String
设定Http Cookie
CGI环境变数
所有的CGI程式都接收以下的环境变数，这些变数在CGI程式中发挥了重要的作用：
变数名
描述
CONTENT_TYPE
这个环境变数的值指示所传递来的资讯的MIME型别。目前，环境变数CONTENT_TYPE一般都是：application/x-www-form-urlencoded,他表示资料来自于HTML表单。
CONTENT_LENGTH
如果服务器与CGI程式资讯的传递方式是POST，这个环境变数即使从标准输入STDIN中可以读到的有效资料的字节数。这个环境变数在读取所输入的资料时必须使用。
HTTP_COOKIE
客户机内的 COOKIE 内容。
HTTP_USER_AGENT
提供包含了版本数或其他专有资料的客户浏览器资讯。
PATH_INFO
这个环境变数的值表示紧接在CGI程式名之后的其他路径资讯。它常常作为CGI程式的引数出现。
QUERY_STRING
如果服务器与CGI程式资讯的传递方式是GET，这个环境变数的值即使所传递的资讯。这个资讯经跟在CGI程式名的后面，两者中间用一个问号'?'分隔。
REMOTE_ADDR
这个环境变数的值是传送请求的客户机的IP地址，例如上面的192.168.1.67。这个值总是存在的。而且它是Web客户机需要提供给Web服务器的唯一标识，可以在CGI程式中用它来区分不同的Web客户机。
REMOTE_HOST
这个环境变数的值包含传送CGI请求的客户机的主机名。如果不支援你想查询，则无需定义此环境变数。
REQUEST_METHOD
提供指令码被呼叫的方法。对于使用 HTTP/1.0 协议的指令码，仅 GET 和 POST 有意义。
SCRIPT_FILENAME
CGI指令码的完整路径
SCRIPT_NAME
CGI指令码的的名称
SERVER_NAME
这是你的 WEB 服务器的主机名、别名或IP地址。
SERVER_SOFTWARE
这个环境变数的值包含了呼叫CGI程式的HTTP服务器的名称和版本号。例如，上面的值为Apache/2.2.14(Unix)
以下是一个简单的CGI指令码输出CGI的环境变数：
#!/usr/bin/python3 import os print ("Content-type: text/html") print () print ("<meta charset=\"utf-8\">") print ("<b>环境变数</b><br>") print ("<ul>") for key in os.environ.keys(): print ("<li><span style='color:green'>%30s </span> : %s </li>" % (key,os.environ[key])) print ("</ul>")
将以上点储存为 test.py ,并修改档案许可权为 755，执行结果如下：
GET和POST方法
浏览器客户端通过两种方法向服务器传递资讯，这两种方法就是 GET 方法和 POST 方法。
使用GET方法传输资料
GET方法传送编码后的使用者资讯到服务端，资料资讯包含在请求页面的URL上，以"?"号分割, 如下所示：
http://www.test.com/cgi-bin/hello.py?key1=value1&key2=value2
有关 GET 请求的其他一些注释：
GET 请求可被快取
GET 请求保留在浏览器历史记录中
GET 请求可被收藏为书签
GET 请求不应在处理敏感资料时使用
GET 请求有长度限制
GET 请求只应当用于取回资料
简单的url例项：GET方法
以下是一个简单的URL，使用GET方法向hello_get.py程式传送两个引数：
/cgi-bin/test.py?name=入门教学&url=http://www.itread01.com
以下为hello_get.py档案的程式码：
#!/usr/bin/python3 # CGI处理模组 import cgi, cgitb # 建立 FieldStorage 的例项化 form = cgi.FieldStorage() # 获取资料 site_name = form.getvalue('name') site_url = form.getvalue('url') print ("Content-type:text/html") print () print ("<html>") print ("<head>") print ("<meta charset=\"utf-8\">") print ("<title>入门教学 CGI 测试例项</title>") print ("</head>") print ("<body>") print ("<h2>%s官网：%s</h2>" % (site_name, site_url)) print ("</body>") print ("</html>")
档案储存后修改 hello_get.py，修改档案许可权为 755：
chmod 755 hello_get.py
浏览器请求输出结果：
简单的表单例项：GET方法
以下是一个通过HTML的表单使用GET方法向服务器传送两个资料，提交的服务器指令码同样是hello_get.py档案，hello_get.html 程式码如下：
<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <form action="/cgi-bin/hello_get.py" method="get"> 站点名称: <input type="text" name="name"> <br /> 站点 URL: <input type="text" name="url" /> <input type="submit" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/提交" /> </form> </body> </html>
预设情况下 cgi-bin 目录只能存放指令码档案，我们将 hello_get.html 储存在 test 目录下，修改档案许可权为 755：
chmod 755 hello_get.html
Gif 演示如下所示：
使用POST方法传递资料
使用POST方法向服务器传递资料是更安全可靠的，像一些敏感资讯如使用者密码等需要使用POST传输资料。
以下同样是hello_get.py ，它也可以处理浏览器提交的POST表单资料:
#!/usr/bin/python3 # CGI处理模组 import cgi, cgitb # 建立 FieldStorage 的例项化 form = cgi.FieldStorage() # 获取资料 site_name = form.getvalue('name') site_url = form.getvalue('url') print ("Content-type:text/html") print () print ("<html>") print ("<head>") print ("<meta charset=\"utf-8\">") print ("<title>入门教学 CGI 测试例项</title>") print ("</head>") print ("<body>") print ("<h2>%s官网：%s</h2>" % (site_name, site_url)) print ("</body>") print ("</html>")
以下为表单通过POST方法（method="post"）向服务器指令码 hello_get.py 提交资料:
<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <form action="/cgi-bin/hello_get.py" method="post"> 站点名称: <input type="text" name="name"> <br /> 站点 URL: <input type="text" name="url" /> <input type="submit" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/提交" /> </form> </body> </html> </form>
Gif 演示如下所示：
通过CGI程式传递checkbox资料
checkbox用于提交一个或者多个选项资料，HTML程式码如下：
<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <form action="/cgi-bin/checkbox.py" method="POST" target="_blank"> <input type="checkbox" name="itread01" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/on" /> 入门教学 <input type="checkbox" name="google" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/on" /> Google <input type="submit" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/选择站点" /> </form> </body> </html>
以下为 checkbox.py 档案的程式码：
#!/usr/bin/python3 # 引入 CGI 处理模组 import cgi, cgitb # 建立 FieldStorage的例项 form = cgi.FieldStorage() # 接收字段资料 if form.getvalue('google'): google_flag = "是" else: google_flag = "否" if form.getvalue('itread01'): itread01_flag = "是" else: itread01_flag = "否" print ("Content-type:text/html") print () print ("<html>") print ("<head>") print ("<meta charset=\"utf-8\">") print ("<title>入门教学 CGI 测试例项</title>") print ("</head>") print ("<body>") print ("<h2> 入门教学是否选择了 : %s</h2>" % itread01_flag) print ("<h2> Google 是否选择了 : %s</h2>" % google_flag) print ("</body>") print ("</html>")
修改 checkbox.py 许可权：
chmod 755 checkbox.py
浏览器访问 Gif 演示图：
通过CGI程式传递Radio资料
Radio 只向服务器传递一个数据，HTML程式码如下：
<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <form action="/cgi-bin/radiobutton.py" method="post" target="_blank"> <input type="radio" name="site" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/itread01" /> 入门教学 <input type="radio" name="site" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/google" /> Google <input type="submit" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/提交" /> </form> </body> </html>
radiobutton.py 指令码程式码如下：
#!/usr/bin/python3 # 引入 CGI 处理模组 import cgi, cgitb # 建立 FieldStorage的例项 form = cgi.FieldStorage() # 接收字段资料 if form.getvalue('site'): site = form.getvalue('site') else: site = "提交资料为空" print ("Content-type:text/html") print () print ("<html>") print ("<head>") print ("<meta charset=\"utf-8\">") print ("<title>入门教学 CGI 测试例项</title>") print ("</head>") print ("<body>") print ("<h2> 选中的网站是 %s</h2>" % site) print ("</body>") print ("</html>")
修改 radiobutton.py 许可权：
chmod 755 radiobutton.py
浏览器访问 Gif 演示图：
通过CGI程式传递 Textarea 资料
Textarea 向服务器传递多行资料，HTML程式码如下：
<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <form action="/cgi-bin/textarea.py" method="post" target="_blank"> <textarea name="textcontent" cols="40" rows="4"> 在这里输入内容... </textarea> <input type="submit" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/提交" /> </form> </body> </html>
textarea.py 指令码程式码如下：
#!/usr/bin/python3 # 引入 CGI 处理模组 import cgi, cgitb # 建立 FieldStorage的例项 form = cgi.FieldStorage() # 接收字段资料 if form.getvalue('textcontent'): text_content = form.getvalue('textcontent') else: text_content = "没有内容" print ("Content-type:text/html") print () print ("<html>") print ("<head>") print ("<meta charset=\"utf-8\">") print ("<title>入门教学 CGI 测试例项</title>") print ("</head>") print ("<body>") print ("<h2> 输入的内容是：%s</h2>" % text_content) print ("</body>") print ("</html>")
修改 textarea.py 许可权：
chmod 755 textarea.py
浏览器访问 Gif 演示图：
通过CGI程式传递下拉资料。
HTML 下拉框程式码如下：
<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <form action="/cgi-bin/dropdown.py" method="post" target="_blank"> <select name="dropdown"> <option value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/itread01" selected>入门教学</option> <option value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/google">Google</option> </select> <input type="submit" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/提交"/> </form> </body> </html>
dropdown.py 指令码程式码如下所示：
#!/usr/bin/python3 # 引入 CGI 处理模组 import cgi, cgitb # 建立 FieldStorage的例项 form = cgi.FieldStorage() # 接收字段资料 if form.getvalue('dropdown'): dropdown_value = https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/form.getvalue('dropdown') else: dropdown_value = "https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/没有内容" print ("Content-type:text/html") print () print ("<html>") print ("<head>") print ("<meta charset=\"utf-8\">") print ("<title>入门教学 CGI 测试例项</title>") print ("</head>") print ("<body>") print ("<h2> 选中的选项是：%s</h2>" % dropdown_value) print ("</body>") print ("</html>")
修改 dropdown.py 许可权：
chmod 755 dropdown.py
浏览器访问 Gif 演示图：
CGI中使用Cookie
在 http 协议一个很大的缺点就是不对使用者身份的进行判断，这样给程式设计人员带来很大的不便， 而 cookie 功能的出现弥补了这个不足。
cookie 就是在客户访问指令码的同时，通过客户的浏览器，在客户硬盘上写入纪录资料 ，当下次客户访问指令码时取回资料资讯，从而达到身份判别的功能，cookie 常用在身份校验中。
cookie的语法
http cookie的传送是通过http头部来实现的，他早于档案的传递，头部set-cookie的语法如下：
Set-cookie:name=name;expires=date;path=path;domain=domain;secure
name=name: 需要设定cookie的值(name不能使用";"和","号),有多个name值时用 ";" 分隔，例如：name1=name1;name2=name2;name3=name3。
expires=date: cookie的有效期限,格式： expires="Wdy,DD-Mon-YYYY HH:MM:SS"
path=path: 设定cookie支援的路径,如果path是一个路径，则cookie对这个目录下的所有档案及子目录生效，例如： path="/cgi-bin/"，如果path是一个档案，则cookie指对这个档案生效，例如：path="/cgi-bin/cookie.cgi"。
domain=domain: 对cookie生效的域名，例如：domain="www.itread01.com"
secure: 如果给出此标志，表示cookie只能通过SSL协议的https服务器来传递。
cookie的接收是通过设定环境变数HTTP_COOKIE来实现的，CGI程式可以通过检索该变数获取cookie资讯。
Cookie设定
Cookie的设定非常简单，cookie会在http头部单独传送。以下例项在cookie中设定了name 和 expires：
#!/usr/bin/python3 # print ('Content-Type: text/html') print ('Set-Cookie: name="入门教学";expires=Wed, 28 Aug 2016 18:30:00 GMT') print () print (""" <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <h1>Cookie set OK!</h1> </body> </html> """)
将以上程式码储存到 cookie_set.py，并修改 cookie_set.py 许可权：
chmod 755 cookie_set.py
以上例项使用了 Set-Cookie 头资讯来设定Cookie资讯，可选项中设定了Cookie的其他属性，如过期时间Expires，域名Domain，路径Path。这些资讯设定在 "Content-type:text/html"之前。
检索Cookie资讯
Cookie资讯检索页非常简单，Cookie资讯储存在CGI的环境变数HTTP_COOKIE中，储存格式如下：
key1=value1;key2=value2;key3=value3....
以下是一个简单的CGI检索cookie资讯的程式：
#!/usr/bin/python3 # 汇入模组 import os import http.cookies print ("Content-type: text/html") print () print (""" <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <h1>读取cookie资讯</h1> """) if 'HTTP_COOKIE' in os.environ: cookie_string=os.environ.get('HTTP_COOKIE') c= http.cookies.SimpleCookie() # c=Cookie.SimpleCookie() c.load(cookie_string) try: data=https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/c['name'].value print ("cookie data: "+data+"<br>") except KeyError: print ("cookie 没有设定或者已过去<br>") print (""" </body> </html> """)
将以上程式码储存到 cookie_get.py，并修改 cookie_get.py 许可权：
chmod 755 cookie_get.py
以上 cookie 设定颜色 Gif 如下所示：
档案上传例项
HTML设定上传档案的表单需要设定 enctype 属性为 multipart/form-data，程式码如下所示：
<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <form enctype="multipart/form-data" action="/cgi-bin/save_file.py" method="post"> <p>选中档案: <input type="file" name="filename" /></p> <p><input type="submit" value="https://www.big2gb.com/cn2tw0.php?url=https://www.itread01.com/python3/上传" /></p> </form> </body> </html>
save_file.py指令码档案程式码如下：
#!/usr/bin/python3 import cgi, os import cgitb; cgitb.enable() form = cgi.FieldStorage() # 获取档名 fileitem = form['filename'] # 检测档案是否上传 if fileitem.filename: # 设定档案路径 fn = os.path.basename(fileitem.filename) open('/tmp/' + fn, 'wb').write(fileitem.file.read()) message = '档案 "' + fn + '" 上传成功' else: message = '档案没有上传' print ("""\ Content-Type: text/html\n <html> <head> <meta charset="utf-8"> <title>入门教学(itread01.com)</title> </head> <body> <p>%s</p> </body> </html> """ % (message,))
将以上程式码储存到 save_file.py，并修改 save_file.py 许可权：
chmod 755 save_file.py
以上 cookie 设定颜色 Gif 如下所示：
如果你使用的系统是Unix/Linux，你必须替换档案分隔符，在window下只需要使用open()语句即可：
fn = os.path.basename(fileitem.filename.replace("\\", "/" ))
档案下载对话方块
我们先在当前目录下建立 foo.txt 档案，用于程式的下载。
档案下载通过设定HTTP头资讯来实现，功能程式码如下：
#!/usr/bin/python3 # HTTP 头部 print ("Content-Disposition: attachment; filename=\"foo.txt\"") print () # 开启档案 fo = open("foo.txt", "rb") str = fo.read(); print (str) # 关闭档案 fo.close()


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
