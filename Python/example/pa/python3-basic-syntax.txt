Python3 基础语法 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 基础语法
Python3 基础语法
编码
预设情况下，Python 3 源代码档案以 UTF-8 编码，所有字串都是 unicode 字串。 当然你也可以为源代码档案指定不同的编码：
# -*- coding: cp-1252 -*-
上述定义允许在原始档中使用 Windows-1252 字符集中的字元编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。
识别符号
第一个字元必须是字母表中字母或下划线 _ 。
识别符号的其他的部分由字母、数字和下划线组成。
识别符号对大小写敏感。
在 Python 3 中，可以用中文作为变数名，非 ASCII 识别符号也是允许的了。
python保留字
保留字即关键字，我们不能把它们用作任何识别符号名称。Python 的标准库提供了一个 keyword 模组，可以输出当前版本的所有关键字：
>>> import keyword >>> keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
注释
Python中单行注释以 # 开头，例项如下：
例项(Python 3.0+)
#!/usr/bin/python3 # 第一个注释 print ("Hello, Python!") # 第二个注释
执行以上程式码，输出结果为：
Hello, Python!
多行注释可以用多个 # 号，还有 ''' 和 """：
例项(Python 3.0+)
#!/usr/bin/python3 # 第一个注释 # 第二个注释 ''' 第三注释 第四注释 ''' """ 第五注释 第六注释 """ print ("Hello, Python!")
执行以上程式码，输出结果为：
Hello, Python!
行与缩排
python最具特色的就是使用缩排来表示程式码块，不需要使用大括号 {} 。
缩排的空格数是可变的，但是同一个程式码块的语句必须包含相同的缩排空格数。例项如下：
例项(Python 3.0+)
if True: print ("True") else: print ("False")
以下程式码最后一行语句缩排数的空格数不一致，会导致执行错误：
例项
if True:
print ("Answer")
print ("True")
else:
print ("Answer")
print ("False")    # 缩排不一致，会导致执行错误

以上程式由于缩排不一致，执行后会出现类似以下错误：
File "test.py", line 6 print ("False") # 缩排不一致，会导致执行错误 ^ IndentationError: unindent does not match any outer indentation level
多行语句
Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠(\)来实现多行语句，例如：
total = item_one + \ item_two + \ item_three
在 [], {}, 或 () 中的多行语句，不需要使用反斜杠(\)，例如：
total = ['item_one', 'item_two', 'item_three', 'item_four', 'item_five']
数字(Number)型别
python中数字有四种类型：整数、布林型、浮点数和复数。
int (整数), 如 1, 只有一种整数型别 int，表示为长整型，没有 python2 中的 Long。
bool (布林), 如 True。
float (浮点数), 如 1.23、3E-2
complex (复数), 如 1 + 2j、 1.1 + 2.2j
字串(String)
python中单引号和双引号使用完全相同。
使用三引号('''或""")可以指定一个多行字串。
转义符 '\'
反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r"this is a line with \n" 则\n会显示，并不是换行。
按字面意义级联字串，如"this " "is " "string"会被自动转换为this is string。
字串可以用 + 运算子连线在一起，用 * 运算子重复。
Python 中的字串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。
Python中的字串不能改变。
Python 没有单独的字元型别，一个字元就是长度为 1 的字串。
字串的撷取的语法格式如下：变数[头下标:尾下标:步长]
word = '字串' sentence = "这是一个句子。" paragraph = """这是一个段落， 可以由多行组成"""
例项(Python 3.0+)
#!/usr/bin/python3 str='123456789' print(str) # 输出字串 print(str[0:-1]) # 输出第一个到倒数第二个的所有字元 print(str[0]) # 输出字串第一个字元 print(str[2:5]) # 输出从第三个开始到第五个的字元 print(str[2:]) # 输出从第三个开始后的所有字元 print(str[1:5:2]) # 输出从第二个开始到第五个且每隔一个的字元（步长为2） print(str * 2) # 输出字串两次 print(str + '你好') # 连线字串 print('------------------------------') print('hello\nitread01') # 使用反斜杠(\)+n转义特殊字元 print(r'hello\nitread01') # 在字串前面新增一个 r，表示原始字串，不会发生转义
这里的 r 指 raw，即 raw string，会自动将反斜杠转义，例如：
>>> print('\n') # 输出空行 >>> print(r'\n') # 输出 \n \n >>>
以上例项输出结果：
123456789 12345678 1 345 3456789 24 123456789123456789 123456789你好 ------------------------------ hello itread01 hello\nitread01
空行
函式之间或类的方法之间用空行分隔，表示一段新的程式码的开始。类和函式入口之间也用一行空行分隔，以突出函式入口的开始。
空行与程式码缩排不同，空行并不是Python语法的一部分。书写时不插入空行，Python直译器执行也不会出错。但是空行的作用在于分隔两段不同功能或含义的程式码，便于日后程式码的维护或重构。
记住：空行也是程式程式码的一部分。
等待使用者输入
执行下面的程式在按回车键后就会等待使用者输入：
例项(Python 3.0+)
#!/usr/bin/python3 input("\n\n按下 enter 键后退出。")
以上程式码中 ，"\n\n"在结果输出前会输出两个新的空行。一旦使用者按下 enter 键时，程式将退出。
同一行显示多条语句
Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的例项：
例项(Python 3.0+)
#!/usr/bin/python3 import sys; x = 'itread01'; sys.stdout.write(x + '\n')
使用指令码执行以上程式码，输出结果为：
itread01
使用互动式命令列执行，输出结果为：
>>> import sys; x = 'itread01'; sys.stdout.write(x + '\n') itread01 7
此处的 7 表示字元数。
多个语句构成程式码组
缩排相同的一组语句构成一个程式码块，我们称之程式码组。
像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行程式码构成程式码组。
我们将首行及后面的程式码组称为一个子句(clause)。
如下例项：
if expression : suite elif expression : suite else : suite
print 输出
print 预设输出是换行的，如果要实现不换行需要在变数末尾加上 end=""：
例项(Python 3.0+)
#!/usr/bin/python3 x="a" y="b" # 换行输出 print( x ) print( y ) print('---------') # 不换行输出 print( x, end=" " ) print( y, end=" " ) print()
以上例项执行结果为：
a b --------- a b
import 与 from...import
在 python 用 import 或者 from...import 来汇入相应的模组。
将整个模组(somemodule)汇入，格式为： import somemodule
从某个模组中汇入某个函式,格式为： from somemodule import somefunction
从某个模组中汇入多个函式,格式为： from somemodule import firstfunc, secondfunc, thirdfunc
将某个模组中的全部函式汇入，格式为： from somemodule import *
汇入 sys 模组
import sys print('================Python import mode==========================') print ('命令列引数为:') for i in sys.argv: print (i) print ('\n python 路径为',sys.path)
汇入 sys 模组的 argv,path 成员
from sys import argv,path # 汇入特定的成员 print('================python from import===================================') print('path:',path) # 因为已经汇入path成员，所以此处引用时不需要加sys.path
命令列引数
很多程式可以执行一些操作来检视一些基本资讯，Python可以使用-h引数检视各引数帮助资讯：
$ python -h usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ... Options and arguments (and corresponding environment variables): -c cmd : program passed in as string (terminates option list) -d : debug output from parser (also PYTHONDEBUG=x) -E : ignore environment variables (such as PYTHONPATH) -h : print this help message and exit [ etc. ]
我们在使用指令码形式执行 Python 时，可以接收命令列输入的引数，具体使用可以参照 Python 3 命令列引数。


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
