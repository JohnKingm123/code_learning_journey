Python3 循环语句 - Python3教学
入门教学 -- 学的不仅是技术，更是梦想！
首页
HTML
CSS
JavaScript
jQuery
Python3
Python2
Java
C
C++
Go
SQL
首页
HTML
Search
Python3教学
Python3 教程 Python3 简介 Python3 环境搭建 Python3 基础语法 Python3 基本资料型别 Python3 直译器 Python3 注释 Python3 运算子 Python3 数字(Number) Python3 字串 Python3 列表 Python3 元组 Python3 字典 Python3 集合 Python3 程式设计第一步 Python3 条件控制 Python3 循环语句 Python3 迭代器与生成器 Python3 函式 Python3 资料结构 Python3 模组 Python3 输入和输出 Python3 File 方法 Python3 OS 档案/目录方法 Python3 错误和异常 Python3 面向物件 Python3 名称空间和作用域 Python3 标准库概览 Python3 例项 Python3 正则表示式 Python3 CGI程式设计 Python MySQL – mysql-connector 驱动 Python3 MySQL 数据库连线 – PyMySQL 驱动 Python3 网络程式设计 Python3 SMTP传送邮件 Python3 多执行绪 Python3 XML 解析 Python3 JSON 资料解析 Python3 日期和时间 Python3 内建函式 Python MongoDB Python urllib Python uWSGI 安装配置
ads
HTML 基础
Python3 循环语句
Python3 循环语句
本章节将为大家介绍 Python 循环语句的使用。
Python 中的循环语句有 for 和 while。
Python 循环语句的控制结构图如下所示：
while 循环
Python 中 while 语句的一般形式：
while 判断条件(condition)： 执行语句(statements)……
执行流程图如下：
执行 Gif 演示：
同样需要注意冒号和缩排。另外，在 Python 中没有 do..while 循环。
以下例项使用了 while 来计算 1 到 100 的总和：
例项
#!/usr/bin/env python3 n = 100 sum = 0 counter = 1 while counter <= n: sum = sum + counter counter += 1 print("1 到 %d 之和为: %d" % (n,sum))
执行结果如下：
1 到 100 之和为: 5050
无限循环
我们可以通过设定条件表示式永远不为 false 来实现无限循环，例项如下：
例项
#!/usr/bin/python3 var = 1 while var == 1 : # 表示式永远为 true num = int(input("输入一个数字 :")) print ("你输入的数字是: ", num) print ("Good bye!")
执行以上指令码，输出结果如下：
输入一个数字 :5 你输入的数字是: 5 输入一个数字 :
你可以使用 CTRL+C 来退出当前的无限循环。
无限循环在服务器上客户端的实时请求非常有用。
while 循环使用 else 语句
如果 while 后面的条件语句为 false 时，则执行 else 的语句块。
语法格式如下：
while <expr>: <statement(s)> else: <additional_statement(s)>
expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)。
循环输出数字，并判断大小：
例项
#!/usr/bin/python3 count = 0 while count < 5: print (count, " 小于 5") count = count + 1 else: print (count, " 大于或等于 5")
执行以上指令码，输出结果如下：
0 小于 5 1 小于 5 2 小于 5 3 小于 5 4 小于 5 5 大于或等于 5
简单语句组
类似if语句的语法，如果你的while循环体中只有一条语句，你可以将该语句与while写在同一行中， 如下所示：
例项
#!/usr/bin/python flag = 1 while (flag): print ('欢迎访问入门教学!') print ("Good bye!")
注意：以上的无限循环你可以使用 CTRL+C 来中断循环。
执行以上指令码，输出结果如下：
欢迎访问入门教学! 欢迎访问入门教学! 欢迎访问入门教学! 欢迎访问入门教学! 欢迎访问入门教学! ……
for 语句
Python for 循环可以遍历任何可迭代物件，如一个列表或者一个字串。
for循环的一般格式如下：
for <variable> in <sequence>: <statements> else: <statements>
流程图：
Python for 循环例项：
例项
>>>languages = ["C", "C++", "Perl", "Python"] >>> for x in languages: ... print (x) ... C C++ Perl Python >>>
以下 for 例项中使用了 break 语句，break 语句用于跳出当前循环体：
例项
#!/usr/bin/python3 sites = ["Baidu", "Google","itread01","Taobao"] for site in sites: if site == "itread01": print("入门教学!") break print("循环资料 " + site) else: print("没有循环资料!") print("完成循环!")
执行指令码后，在循环到 "itread01"时会跳出循环体：
循环资料 Baidu 循环资料 Google 入门教学! 完成循环!
range()函式
如果你需要遍历数字序列，可以使用内建range()函式。它会生成数列，例如:
例项
>>>for i in range(5): ... print(i) ... 0 1 2 3 4
你也可以使用range指定区间的值：
例项
>>>for i in range(5,9) : print(i) 5 6 7 8 >>>
也可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做'步长'):
例项
>>>for i in range(0, 10, 3) : print(i) 0 3 6 9 >>>
负数：
例项
>>>for i in range(-10, -100, -30) : print(i) -10 -40 -70 >>>
您可以结合range()和len()函式以遍历一个序列的索引,如下所示:
例项
>>>a = ['Google', 'Baidu', 'itread01', 'Taobao', 'QQ'] >>> for i in range(len(a)): ... print(i, a[i]) ... 0 Google 1 Baidu 2 itread01 3 Taobao 4 QQ >>>
还可以使用range()函式来建立一个列表：
例项
>>>list(range(5)) [0, 1, 2, 3, 4] >>>
break 和 continue 语句及循环中的 else 子句
break 执行流程图：
continue 执行流程图：
while 语句程式码执行过程：
for 语句程式码执行过程：
break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。
continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。
例项
while 中使用 break：
例项
n = 5
while n > 0:
n -= 1
if n == 2:
break
print(n)
print('循环结束。')

输出结果为：
4 3 循环结束。
while 中使用 continue：
例项
n = 5
while n > 0:
n -= 1
if n == 2:
continue
print(n)
print('循环结束。')

输出结果为：
4 3 1 0 循环结束。
更多例项如下：
例项
#!/usr/bin/python3 for letter in 'itread01': # 第一个例项 if letter == 'b': break print ('当前字母为 :', letter) var = 10 # 第二个例项 while var > 0: print ('当期变数值为 :', var) var = var -1 if var == 5: break print ("Good bye!")
执行以上指令码输出结果为：
当前字母为 : R 当前字母为 : u 当前字母为 : n 当前字母为 : o 当前字母为 : o 当期变数值为 : 10 当期变数值为 : 9 当期变数值为 : 8 当期变数值为 : 7 当期变数值为 : 6 Good bye!
以下例项循环字串 itread01，碰到字母 o 跳过输出：
例项
#!/usr/bin/python3 for letter in 'itread01': # 第一个例项 if letter == 'o': # 字母为 o 时跳过输出 continue print ('当前字母 :', letter) var = 10 # 第二个例项 while var > 0: var = var -1 if var == 5: # 变数为 5 时跳过输出 continue print ('当前变数值 :', var) print ("Good bye!")
执行以上指令码输出结果为：
当前字母 : R 当前字母 : u 当前字母 : n 当前字母 : b 当前变数值 : 9 当前变数值 : 8 当前变数值 : 7 当前变数值 : 6 当前变数值 : 4 当前变数值 : 3 当前变数值 : 2 当前变数值 : 1 当前变数值 : 0 Good bye!
循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行，但循环被 break 终止时不执行。
如下例项用于查询质数的循环例子:
例项
#!/usr/bin/python3 for n in range(2, 10): for x in range(2, n): if n % x == 0: print(n, '等于', x, '*', n//x) break else: # 循环中没有找到元素 print(n, ' 是质数')
执行以上指令码输出结果为：
2 是质数 3 是质数 4 等于 2 * 2 5 是质数 6 等于 2 * 3 7 是质数 8 等于 2 * 4 9 等于 3 * 3
pass 语句
Python pass是空语句，是为了保持程式结构的完整性。
pass 不做任何事情，一般用做占位语句，如下例项
例项
>>>while True: ... pass # 等待键盘中断 (Ctrl+C)
最小的类:
例项
>>>class MyEmptyClass: ... pass
以下例项在字母为 o 时 执行 pass 语句块:
例项
#!/usr/bin/python3 for letter in 'itread01': if letter == 'o': pass print ('执行 pass 块') print ('当前字母 :', letter) print ("Good bye!")
执行以上指令码输出结果为：
当前字母 : R 当前字母 : u 当前字母 : n 执行 pass 块 当前字母 : o 执行 pass 块 当前字母 : o 当前字母 : b Good bye!


.sidebar-tree .double-li { width:300px; } .sidebar-tree .double-li li { width: 44%; line-height: 1.5em; border-bottom: 1px solid #ccc; float: left; display: inline; }
分类导航
HTML / CSS
HTML 教程
HTML5 教程
CSS 教程
CSS3 教程
JavaScript
JavaScript 教程
jQuery 教程
Node.js 教程
服务端
Python 教程
Python3 教程
Linux 教程
Docker 教程
Ruby 教程
Java 教程
JSP 教程
C 教程
C++ 教程
Perl 教程
Go 教程
PHP 教程
正则表达式
数据库
SQL 教程
MySQL 教程
PostgreSQL 教程
SQLite 教程
MongoDB 教程
Redis 教程
Memcached 教程
行动端
IOS 教程
Swift 教程


Advertisement
Copyright © 2016-2021 IT阅读  Itread01.com All Rights Reserved.
0.001291036605835
